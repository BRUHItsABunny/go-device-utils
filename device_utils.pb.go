// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto-device-utils/device_utils.proto

package device_utils

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// - RFC 5246 (TLS 1.2): https://tools.ietf.org/html/rfc5246
// - RFC 6101 (SSL 3.0): https://tools.ietf.org/html/rfc6101
// https://github.com/openssl/openssl/blob/c04e78f0c69201226430fed14c291c281da47f2d/include/openssl/prov_ssl.h
type Browser_TLSFingerprint_ProtocolVersion int32

const (
	Browser_TLSFingerprint_UNKNOWN   Browser_TLSFingerprint_ProtocolVersion = 0
	Browser_TLSFingerprint_SSL3      Browser_TLSFingerprint_ProtocolVersion = 768
	Browser_TLSFingerprint_TLS1      Browser_TLSFingerprint_ProtocolVersion = 769
	Browser_TLSFingerprint_TLS1_1    Browser_TLSFingerprint_ProtocolVersion = 770
	Browser_TLSFingerprint_TLS1_2    Browser_TLSFingerprint_ProtocolVersion = 771
	Browser_TLSFingerprint_TLS1_3    Browser_TLSFingerprint_ProtocolVersion = 772
	Browser_TLSFingerprint_DTLS1     Browser_TLSFingerprint_ProtocolVersion = 65279
	Browser_TLSFingerprint_DTLS1_2   Browser_TLSFingerprint_ProtocolVersion = 65277
	Browser_TLSFingerprint_DTLS1_BAD Browser_TLSFingerprint_ProtocolVersion = 256
)

// Enum value maps for Browser_TLSFingerprint_ProtocolVersion.
var (
	Browser_TLSFingerprint_ProtocolVersion_name = map[int32]string{
		0:     "UNKNOWN",
		768:   "SSL3",
		769:   "TLS1",
		770:   "TLS1_1",
		771:   "TLS1_2",
		772:   "TLS1_3",
		65279: "DTLS1",
		65277: "DTLS1_2",
		256:   "DTLS1_BAD",
	}
	Browser_TLSFingerprint_ProtocolVersion_value = map[string]int32{
		"UNKNOWN":   0,
		"SSL3":      768,
		"TLS1":      769,
		"TLS1_1":    770,
		"TLS1_2":    771,
		"TLS1_3":    772,
		"DTLS1":     65279,
		"DTLS1_2":   65277,
		"DTLS1_BAD": 256,
	}
)

func (x Browser_TLSFingerprint_ProtocolVersion) Enum() *Browser_TLSFingerprint_ProtocolVersion {
	p := new(Browser_TLSFingerprint_ProtocolVersion)
	*p = x
	return p
}

func (x Browser_TLSFingerprint_ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Browser_TLSFingerprint_ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[0].Descriptor()
}

func (Browser_TLSFingerprint_ProtocolVersion) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[0]
}

func (x Browser_TLSFingerprint_ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Browser_TLSFingerprint_ProtocolVersion.Descriptor instead.
func (Browser_TLSFingerprint_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0, 0}
}

// - TLS cipher-suites: https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4
type Browser_TLSFingerprint_CipherSuite int32

const (
	Browser_TLSFingerprint_TLS_NULL_WITH_NULL_NULL                       Browser_TLSFingerprint_CipherSuite = 0
	Browser_TLSFingerprint_TLS_RSA_WITH_NULL_MD5                         Browser_TLSFingerprint_CipherSuite = 1
	Browser_TLSFingerprint_TLS_RSA_WITH_NULL_SHA                         Browser_TLSFingerprint_CipherSuite = 2
	Browser_TLSFingerprint_TLS_RSA_EXPORT_WITH_RC4_40_MD5                Browser_TLSFingerprint_CipherSuite = 3
	Browser_TLSFingerprint_TLS_RSA_WITH_RC4_128_MD5                      Browser_TLSFingerprint_CipherSuite = 4
	Browser_TLSFingerprint_TLS_RSA_WITH_RC4_128_SHA                      Browser_TLSFingerprint_CipherSuite = 5
	Browser_TLSFingerprint_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5            Browser_TLSFingerprint_CipherSuite = 6
	Browser_TLSFingerprint_TLS_RSA_WITH_IDEA_CBC_SHA                     Browser_TLSFingerprint_CipherSuite = 7
	Browser_TLSFingerprint_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 8
	Browser_TLSFingerprint_TLS_RSA_WITH_DES_CBC_SHA                      Browser_TLSFingerprint_CipherSuite = 9
	Browser_TLSFingerprint_TLS_RSA_WITH_3DES_EDE_CBC_SHA                 Browser_TLSFingerprint_CipherSuite = 10
	Browser_TLSFingerprint_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 11
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_DES_CBC_SHA                   Browser_TLSFingerprint_CipherSuite = 12
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 13
	Browser_TLSFingerprint_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 14
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_DES_CBC_SHA                   Browser_TLSFingerprint_CipherSuite = 15
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 16
	Browser_TLSFingerprint_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 17
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_DES_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 18
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 19
	Browser_TLSFingerprint_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 20
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_DES_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 21
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 22
	Browser_TLSFingerprint_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5            Browser_TLSFingerprint_CipherSuite = 23
	Browser_TLSFingerprint_TLS_DH_anon_WITH_RC4_128_MD5                  Browser_TLSFingerprint_CipherSuite = 24
	Browser_TLSFingerprint_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 25
	Browser_TLSFingerprint_TLS_DH_anon_WITH_DES_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 26
	Browser_TLSFingerprint_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 27
	Browser_TLSFingerprint_TLS_KRB5_WITH_DES_CBC_SHA                     Browser_TLSFingerprint_CipherSuite = 30
	Browser_TLSFingerprint_TLS_KRB5_WITH_3DES_EDE_CBC_SHA                Browser_TLSFingerprint_CipherSuite = 31
	Browser_TLSFingerprint_TLS_KRB5_WITH_RC4_128_SHA                     Browser_TLSFingerprint_CipherSuite = 32
	Browser_TLSFingerprint_TLS_KRB5_WITH_IDEA_CBC_SHA                    Browser_TLSFingerprint_CipherSuite = 33
	Browser_TLSFingerprint_TLS_KRB5_WITH_DES_CBC_MD5                     Browser_TLSFingerprint_CipherSuite = 34
	Browser_TLSFingerprint_TLS_KRB5_WITH_3DES_EDE_CBC_MD5                Browser_TLSFingerprint_CipherSuite = 35
	Browser_TLSFingerprint_TLS_KRB5_WITH_RC4_128_MD5                     Browser_TLSFingerprint_CipherSuite = 36
	Browser_TLSFingerprint_TLS_KRB5_WITH_IDEA_CBC_MD5                    Browser_TLSFingerprint_CipherSuite = 37
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA           Browser_TLSFingerprint_CipherSuite = 38
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA           Browser_TLSFingerprint_CipherSuite = 39
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_RC4_40_SHA               Browser_TLSFingerprint_CipherSuite = 40
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5           Browser_TLSFingerprint_CipherSuite = 41
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5           Browser_TLSFingerprint_CipherSuite = 42
	Browser_TLSFingerprint_TLS_KRB5_EXPORT_WITH_RC4_40_MD5               Browser_TLSFingerprint_CipherSuite = 43
	Browser_TLSFingerprint_TLS_PSK_WITH_NULL_SHA                         Browser_TLSFingerprint_CipherSuite = 44
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_NULL_SHA                     Browser_TLSFingerprint_CipherSuite = 45
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_NULL_SHA                     Browser_TLSFingerprint_CipherSuite = 46
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_128_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 47
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_128_CBC_SHA               Browser_TLSFingerprint_CipherSuite = 48
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_128_CBC_SHA               Browser_TLSFingerprint_CipherSuite = 49
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 50
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 51
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 52
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_256_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 53
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_256_CBC_SHA               Browser_TLSFingerprint_CipherSuite = 54
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_256_CBC_SHA               Browser_TLSFingerprint_CipherSuite = 55
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 56
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 57
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 58
	Browser_TLSFingerprint_TLS_RSA_WITH_NULL_SHA256                      Browser_TLSFingerprint_CipherSuite = 59
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_128_CBC_SHA256               Browser_TLSFingerprint_CipherSuite = 60
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_256_CBC_SHA256               Browser_TLSFingerprint_CipherSuite = 61
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_128_CBC_SHA256            Browser_TLSFingerprint_CipherSuite = 62
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_128_CBC_SHA256            Browser_TLSFingerprint_CipherSuite = 63
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 64
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 65
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 66
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 67
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 68
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 69
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 70
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 103
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_256_CBC_SHA256            Browser_TLSFingerprint_CipherSuite = 104
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_256_CBC_SHA256            Browser_TLSFingerprint_CipherSuite = 105
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 106
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 107
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 108
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_256_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 109
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 132
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 133
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 134
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 135
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 136
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 137
	Browser_TLSFingerprint_TLS_PSK_WITH_RC4_128_SHA                      Browser_TLSFingerprint_CipherSuite = 138
	Browser_TLSFingerprint_TLS_PSK_WITH_3DES_EDE_CBC_SHA                 Browser_TLSFingerprint_CipherSuite = 139
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_128_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 140
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_256_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 141
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_RC4_128_SHA                  Browser_TLSFingerprint_CipherSuite = 142
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 143
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 144
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 145
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_RC4_128_SHA                  Browser_TLSFingerprint_CipherSuite = 146
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 147
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 148
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 149
	Browser_TLSFingerprint_TLS_RSA_WITH_SEED_CBC_SHA                     Browser_TLSFingerprint_CipherSuite = 150
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_SEED_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 151
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_SEED_CBC_SHA                  Browser_TLSFingerprint_CipherSuite = 152
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_SEED_CBC_SHA                 Browser_TLSFingerprint_CipherSuite = 153
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_SEED_CBC_SHA                 Browser_TLSFingerprint_CipherSuite = 154
	Browser_TLSFingerprint_TLS_DH_anon_WITH_SEED_CBC_SHA                 Browser_TLSFingerprint_CipherSuite = 155
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_128_GCM_SHA256               Browser_TLSFingerprint_CipherSuite = 156
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_256_GCM_SHA384               Browser_TLSFingerprint_CipherSuite = 157
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 158
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 159
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_128_GCM_SHA256            Browser_TLSFingerprint_CipherSuite = 160
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_AES_256_GCM_SHA384            Browser_TLSFingerprint_CipherSuite = 161
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 162
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 163
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_128_GCM_SHA256            Browser_TLSFingerprint_CipherSuite = 164
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_AES_256_GCM_SHA384            Browser_TLSFingerprint_CipherSuite = 165
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 166
	Browser_TLSFingerprint_TLS_DH_anon_WITH_AES_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 167
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_128_GCM_SHA256               Browser_TLSFingerprint_CipherSuite = 168
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_256_GCM_SHA384               Browser_TLSFingerprint_CipherSuite = 169
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 170
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 171
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 172
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 173
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_128_CBC_SHA256               Browser_TLSFingerprint_CipherSuite = 174
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_256_CBC_SHA384               Browser_TLSFingerprint_CipherSuite = 175
	Browser_TLSFingerprint_TLS_PSK_WITH_NULL_SHA256                      Browser_TLSFingerprint_CipherSuite = 176
	Browser_TLSFingerprint_TLS_PSK_WITH_NULL_SHA384                      Browser_TLSFingerprint_CipherSuite = 177
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 178
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384           Browser_TLSFingerprint_CipherSuite = 179
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_NULL_SHA256                  Browser_TLSFingerprint_CipherSuite = 180
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_NULL_SHA384                  Browser_TLSFingerprint_CipherSuite = 181
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 182
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384           Browser_TLSFingerprint_CipherSuite = 183
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_NULL_SHA256                  Browser_TLSFingerprint_CipherSuite = 184
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_NULL_SHA384                  Browser_TLSFingerprint_CipherSuite = 185
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 186
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 187
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 188
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 189
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 190
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 191
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 192
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 193
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 194
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 195
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 196
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 197
	Browser_TLSFingerprint_TLS_SM4_GCM_SM3                               Browser_TLSFingerprint_CipherSuite = 198
	Browser_TLSFingerprint_TLS_SM4_CCM_SM3                               Browser_TLSFingerprint_CipherSuite = 199
	Browser_TLSFingerprint_TLS_EMPTY_RENEGOTIATION_INFO_SCSV             Browser_TLSFingerprint_CipherSuite = 255
	Browser_TLSFingerprint_Reserved                                      Browser_TLSFingerprint_CipherSuite = 2570
	Browser_TLSFingerprint_Unassigned                                    Browser_TLSFingerprint_CipherSuite = 4864
	Browser_TLSFingerprint_TLS_AES_128_GCM_SHA256                        Browser_TLSFingerprint_CipherSuite = 4865
	Browser_TLSFingerprint_TLS_AES_256_GCM_SHA384                        Browser_TLSFingerprint_CipherSuite = 4866
	Browser_TLSFingerprint_TLS_CHACHA20_POLY1305_SHA256                  Browser_TLSFingerprint_CipherSuite = 4867
	Browser_TLSFingerprint_TLS_AES_128_CCM_SHA256                        Browser_TLSFingerprint_CipherSuite = 4868
	Browser_TLSFingerprint_TLS_AES_128_CCM_8_SHA256                      Browser_TLSFingerprint_CipherSuite = 4869
	Browser_TLSFingerprint_TLS_AEGIS_256_SHA384                          Browser_TLSFingerprint_CipherSuite = 4870
	Browser_TLSFingerprint_TLS_AEGIS_128L_SHA256                         Browser_TLSFingerprint_CipherSuite = 4871
	Browser_TLSFingerprint_TLS_FALLBACK_SCSV                             Browser_TLSFingerprint_CipherSuite = 22016
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_NULL_SHA                  Browser_TLSFingerprint_CipherSuite = 49153
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_RC4_128_SHA               Browser_TLSFingerprint_CipherSuite = 49154
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49155
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA           Browser_TLSFingerprint_CipherSuite = 49156
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA           Browser_TLSFingerprint_CipherSuite = 49157
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_NULL_SHA                 Browser_TLSFingerprint_CipherSuite = 49158
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA              Browser_TLSFingerprint_CipherSuite = 49159
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 49160
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49161
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49162
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_NULL_SHA                    Browser_TLSFingerprint_CipherSuite = 49163
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_RC4_128_SHA                 Browser_TLSFingerprint_CipherSuite = 49164
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49165
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 49166
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 49167
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_NULL_SHA                   Browser_TLSFingerprint_CipherSuite = 49168
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_RC4_128_SHA                Browser_TLSFingerprint_CipherSuite = 49169
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA           Browser_TLSFingerprint_CipherSuite = 49170
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49171
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49172
	Browser_TLSFingerprint_TLS_ECDH_anon_WITH_NULL_SHA                   Browser_TLSFingerprint_CipherSuite = 49173
	Browser_TLSFingerprint_TLS_ECDH_anon_WITH_RC4_128_SHA                Browser_TLSFingerprint_CipherSuite = 49174
	Browser_TLSFingerprint_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA           Browser_TLSFingerprint_CipherSuite = 49175
	Browser_TLSFingerprint_TLS_ECDH_anon_WITH_AES_128_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49176
	Browser_TLSFingerprint_TLS_ECDH_anon_WITH_AES_256_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49177
	Browser_TLSFingerprint_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA             Browser_TLSFingerprint_CipherSuite = 49178
	Browser_TLSFingerprint_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 49179
	Browser_TLSFingerprint_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA         Browser_TLSFingerprint_CipherSuite = 49180
	Browser_TLSFingerprint_TLS_SRP_SHA_WITH_AES_128_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 49181
	Browser_TLSFingerprint_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49182
	Browser_TLSFingerprint_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49183
	Browser_TLSFingerprint_TLS_SRP_SHA_WITH_AES_256_CBC_SHA              Browser_TLSFingerprint_CipherSuite = 49184
	Browser_TLSFingerprint_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49185
	Browser_TLSFingerprint_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA          Browser_TLSFingerprint_CipherSuite = 49186
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 49187
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384       Browser_TLSFingerprint_CipherSuite = 49188
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256        Browser_TLSFingerprint_CipherSuite = 49189
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384        Browser_TLSFingerprint_CipherSuite = 49190
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256         Browser_TLSFingerprint_CipherSuite = 49191
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384         Browser_TLSFingerprint_CipherSuite = 49192
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49193
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49194
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256       Browser_TLSFingerprint_CipherSuite = 49195
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384       Browser_TLSFingerprint_CipherSuite = 49196
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256        Browser_TLSFingerprint_CipherSuite = 49197
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384        Browser_TLSFingerprint_CipherSuite = 49198
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256         Browser_TLSFingerprint_CipherSuite = 49199
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384         Browser_TLSFingerprint_CipherSuite = 49200
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49201
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49202
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_RC4_128_SHA                Browser_TLSFingerprint_CipherSuite = 49203
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA           Browser_TLSFingerprint_CipherSuite = 49204
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49205
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA            Browser_TLSFingerprint_CipherSuite = 49206
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256         Browser_TLSFingerprint_CipherSuite = 49207
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384         Browser_TLSFingerprint_CipherSuite = 49208
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_NULL_SHA                   Browser_TLSFingerprint_CipherSuite = 49209
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_NULL_SHA256                Browser_TLSFingerprint_CipherSuite = 49210
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_NULL_SHA384                Browser_TLSFingerprint_CipherSuite = 49211
	Browser_TLSFingerprint_TLS_RSA_WITH_ARIA_128_CBC_SHA256              Browser_TLSFingerprint_CipherSuite = 49212
	Browser_TLSFingerprint_TLS_RSA_WITH_ARIA_256_CBC_SHA384              Browser_TLSFingerprint_CipherSuite = 49213
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 49214
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384           Browser_TLSFingerprint_CipherSuite = 49215
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256           Browser_TLSFingerprint_CipherSuite = 49216
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384           Browser_TLSFingerprint_CipherSuite = 49217
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49218
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49219
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49220
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49221
	Browser_TLSFingerprint_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49222
	Browser_TLSFingerprint_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49223
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 49224
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384      Browser_TLSFingerprint_CipherSuite = 49225
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256       Browser_TLSFingerprint_CipherSuite = 49226
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384       Browser_TLSFingerprint_CipherSuite = 49227
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256        Browser_TLSFingerprint_CipherSuite = 49228
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384        Browser_TLSFingerprint_CipherSuite = 49229
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256         Browser_TLSFingerprint_CipherSuite = 49230
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384         Browser_TLSFingerprint_CipherSuite = 49231
	Browser_TLSFingerprint_TLS_RSA_WITH_ARIA_128_GCM_SHA256              Browser_TLSFingerprint_CipherSuite = 49232
	Browser_TLSFingerprint_TLS_RSA_WITH_ARIA_256_GCM_SHA384              Browser_TLSFingerprint_CipherSuite = 49233
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49234
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49235
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 49236
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 49237
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49238
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49239
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256           Browser_TLSFingerprint_CipherSuite = 49240
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384           Browser_TLSFingerprint_CipherSuite = 49241
	Browser_TLSFingerprint_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49242
	Browser_TLSFingerprint_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49243
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49244
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49245
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256       Browser_TLSFingerprint_CipherSuite = 49246
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384       Browser_TLSFingerprint_CipherSuite = 49247
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256        Browser_TLSFingerprint_CipherSuite = 49248
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384        Browser_TLSFingerprint_CipherSuite = 49249
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256         Browser_TLSFingerprint_CipherSuite = 49250
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384         Browser_TLSFingerprint_CipherSuite = 49251
	Browser_TLSFingerprint_TLS_PSK_WITH_ARIA_128_CBC_SHA256              Browser_TLSFingerprint_CipherSuite = 49252
	Browser_TLSFingerprint_TLS_PSK_WITH_ARIA_256_CBC_SHA384              Browser_TLSFingerprint_CipherSuite = 49253
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49254
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49255
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49256
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49257
	Browser_TLSFingerprint_TLS_PSK_WITH_ARIA_128_GCM_SHA256              Browser_TLSFingerprint_CipherSuite = 49258
	Browser_TLSFingerprint_TLS_PSK_WITH_ARIA_256_GCM_SHA384              Browser_TLSFingerprint_CipherSuite = 49259
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49260
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49261
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49262
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49263
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256        Browser_TLSFingerprint_CipherSuite = 49264
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384        Browser_TLSFingerprint_CipherSuite = 49265
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  Browser_TLSFingerprint_CipherSuite = 49266
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  Browser_TLSFingerprint_CipherSuite = 49267
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256   Browser_TLSFingerprint_CipherSuite = 49268
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384   Browser_TLSFingerprint_CipherSuite = 49269
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256    Browser_TLSFingerprint_CipherSuite = 49270
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384    Browser_TLSFingerprint_CipherSuite = 49271
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256     Browser_TLSFingerprint_CipherSuite = 49272
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384     Browser_TLSFingerprint_CipherSuite = 49273
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49274
	Browser_TLSFingerprint_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49275
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49276
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49277
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256       Browser_TLSFingerprint_CipherSuite = 49278
	Browser_TLSFingerprint_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384       Browser_TLSFingerprint_CipherSuite = 49279
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49280
	Browser_TLSFingerprint_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49281
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256       Browser_TLSFingerprint_CipherSuite = 49282
	Browser_TLSFingerprint_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384       Browser_TLSFingerprint_CipherSuite = 49283
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49284
	Browser_TLSFingerprint_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49285
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  Browser_TLSFingerprint_CipherSuite = 49286
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  Browser_TLSFingerprint_CipherSuite = 49287
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256   Browser_TLSFingerprint_CipherSuite = 49288
	Browser_TLSFingerprint_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384   Browser_TLSFingerprint_CipherSuite = 49289
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256    Browser_TLSFingerprint_CipherSuite = 49290
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384    Browser_TLSFingerprint_CipherSuite = 49291
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256     Browser_TLSFingerprint_CipherSuite = 49292
	Browser_TLSFingerprint_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384     Browser_TLSFingerprint_CipherSuite = 49293
	Browser_TLSFingerprint_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256          Browser_TLSFingerprint_CipherSuite = 49294
	Browser_TLSFingerprint_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384          Browser_TLSFingerprint_CipherSuite = 49295
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49296
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49297
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256      Browser_TLSFingerprint_CipherSuite = 49298
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384      Browser_TLSFingerprint_CipherSuite = 49299
	Browser_TLSFingerprint_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256          Browser_TLSFingerprint_CipherSuite = 49300
	Browser_TLSFingerprint_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384          Browser_TLSFingerprint_CipherSuite = 49301
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 49302
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384      Browser_TLSFingerprint_CipherSuite = 49303
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256      Browser_TLSFingerprint_CipherSuite = 49304
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384      Browser_TLSFingerprint_CipherSuite = 49305
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256    Browser_TLSFingerprint_CipherSuite = 49306
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384    Browser_TLSFingerprint_CipherSuite = 49307
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_128_CCM                      Browser_TLSFingerprint_CipherSuite = 49308
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_256_CCM                      Browser_TLSFingerprint_CipherSuite = 49309
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_128_CCM                  Browser_TLSFingerprint_CipherSuite = 49310
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_256_CCM                  Browser_TLSFingerprint_CipherSuite = 49311
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_128_CCM_8                    Browser_TLSFingerprint_CipherSuite = 49312
	Browser_TLSFingerprint_TLS_RSA_WITH_AES_256_CCM_8                    Browser_TLSFingerprint_CipherSuite = 49313
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_128_CCM_8                Browser_TLSFingerprint_CipherSuite = 49314
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_AES_256_CCM_8                Browser_TLSFingerprint_CipherSuite = 49315
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_128_CCM                      Browser_TLSFingerprint_CipherSuite = 49316
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_256_CCM                      Browser_TLSFingerprint_CipherSuite = 49317
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_128_CCM                  Browser_TLSFingerprint_CipherSuite = 49318
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_AES_256_CCM                  Browser_TLSFingerprint_CipherSuite = 49319
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_128_CCM_8                    Browser_TLSFingerprint_CipherSuite = 49320
	Browser_TLSFingerprint_TLS_PSK_WITH_AES_256_CCM_8                    Browser_TLSFingerprint_CipherSuite = 49321
	Browser_TLSFingerprint_TLS_PSK_DHE_WITH_AES_128_CCM_8                Browser_TLSFingerprint_CipherSuite = 49322
	Browser_TLSFingerprint_TLS_PSK_DHE_WITH_AES_256_CCM_8                Browser_TLSFingerprint_CipherSuite = 49323
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_128_CCM              Browser_TLSFingerprint_CipherSuite = 49324
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_256_CCM              Browser_TLSFingerprint_CipherSuite = 49325
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8            Browser_TLSFingerprint_CipherSuite = 49326
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8            Browser_TLSFingerprint_CipherSuite = 49327
	Browser_TLSFingerprint_TLS_ECCPWD_WITH_AES_128_GCM_SHA256            Browser_TLSFingerprint_CipherSuite = 49328
	Browser_TLSFingerprint_TLS_ECCPWD_WITH_AES_256_GCM_SHA384            Browser_TLSFingerprint_CipherSuite = 49329
	Browser_TLSFingerprint_TLS_ECCPWD_WITH_AES_128_CCM_SHA256            Browser_TLSFingerprint_CipherSuite = 49330
	Browser_TLSFingerprint_TLS_ECCPWD_WITH_AES_256_CCM_SHA384            Browser_TLSFingerprint_CipherSuite = 49331
	Browser_TLSFingerprint_TLS_SHA256_SHA256                             Browser_TLSFingerprint_CipherSuite = 49332
	Browser_TLSFingerprint_TLS_SHA384_SHA384                             Browser_TLSFingerprint_CipherSuite = 49333
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC  Browser_TLSFingerprint_CipherSuite = 49408
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC       Browser_TLSFingerprint_CipherSuite = 49409
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_28147_CNT_IMIT       Browser_TLSFingerprint_CipherSuite = 49410
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L     Browser_TLSFingerprint_CipherSuite = 49411
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_MAGMA_MGM_L          Browser_TLSFingerprint_CipherSuite = 49412
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S     Browser_TLSFingerprint_CipherSuite = 49413
	Browser_TLSFingerprint_TLS_GOSTR341112_256_WITH_MAGMA_MGM_S          Browser_TLSFingerprint_CipherSuite = 49414
	Browser_TLSFingerprint_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   Browser_TLSFingerprint_CipherSuite = 52392
	Browser_TLSFingerprint_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 Browser_TLSFingerprint_CipherSuite = 52393
	Browser_TLSFingerprint_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256     Browser_TLSFingerprint_CipherSuite = 52394
	Browser_TLSFingerprint_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256         Browser_TLSFingerprint_CipherSuite = 52395
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256   Browser_TLSFingerprint_CipherSuite = 52396
	Browser_TLSFingerprint_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256     Browser_TLSFingerprint_CipherSuite = 52397
	Browser_TLSFingerprint_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256     Browser_TLSFingerprint_CipherSuite = 52398
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256         Browser_TLSFingerprint_CipherSuite = 53249
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384         Browser_TLSFingerprint_CipherSuite = 53250
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256       Browser_TLSFingerprint_CipherSuite = 53251
	Browser_TLSFingerprint_TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256         Browser_TLSFingerprint_CipherSuite = 53253
)

// Enum value maps for Browser_TLSFingerprint_CipherSuite.
var (
	Browser_TLSFingerprint_CipherSuite_name = map[int32]string{
		0:     "TLS_NULL_WITH_NULL_NULL",
		1:     "TLS_RSA_WITH_NULL_MD5",
		2:     "TLS_RSA_WITH_NULL_SHA",
		3:     "TLS_RSA_EXPORT_WITH_RC4_40_MD5",
		4:     "TLS_RSA_WITH_RC4_128_MD5",
		5:     "TLS_RSA_WITH_RC4_128_SHA",
		6:     "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5",
		7:     "TLS_RSA_WITH_IDEA_CBC_SHA",
		8:     "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA",
		9:     "TLS_RSA_WITH_DES_CBC_SHA",
		10:    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
		11:    "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA",
		12:    "TLS_DH_DSS_WITH_DES_CBC_SHA",
		13:    "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA",
		14:    "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA",
		15:    "TLS_DH_RSA_WITH_DES_CBC_SHA",
		16:    "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA",
		17:    "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA",
		18:    "TLS_DHE_DSS_WITH_DES_CBC_SHA",
		19:    "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
		20:    "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA",
		21:    "TLS_DHE_RSA_WITH_DES_CBC_SHA",
		22:    "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
		23:    "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5",
		24:    "TLS_DH_anon_WITH_RC4_128_MD5",
		25:    "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA",
		26:    "TLS_DH_anon_WITH_DES_CBC_SHA",
		27:    "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA",
		30:    "TLS_KRB5_WITH_DES_CBC_SHA",
		31:    "TLS_KRB5_WITH_3DES_EDE_CBC_SHA",
		32:    "TLS_KRB5_WITH_RC4_128_SHA",
		33:    "TLS_KRB5_WITH_IDEA_CBC_SHA",
		34:    "TLS_KRB5_WITH_DES_CBC_MD5",
		35:    "TLS_KRB5_WITH_3DES_EDE_CBC_MD5",
		36:    "TLS_KRB5_WITH_RC4_128_MD5",
		37:    "TLS_KRB5_WITH_IDEA_CBC_MD5",
		38:    "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA",
		39:    "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA",
		40:    "TLS_KRB5_EXPORT_WITH_RC4_40_SHA",
		41:    "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5",
		42:    "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5",
		43:    "TLS_KRB5_EXPORT_WITH_RC4_40_MD5",
		44:    "TLS_PSK_WITH_NULL_SHA",
		45:    "TLS_DHE_PSK_WITH_NULL_SHA",
		46:    "TLS_RSA_PSK_WITH_NULL_SHA",
		47:    "TLS_RSA_WITH_AES_128_CBC_SHA",
		48:    "TLS_DH_DSS_WITH_AES_128_CBC_SHA",
		49:    "TLS_DH_RSA_WITH_AES_128_CBC_SHA",
		50:    "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
		51:    "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
		52:    "TLS_DH_anon_WITH_AES_128_CBC_SHA",
		53:    "TLS_RSA_WITH_AES_256_CBC_SHA",
		54:    "TLS_DH_DSS_WITH_AES_256_CBC_SHA",
		55:    "TLS_DH_RSA_WITH_AES_256_CBC_SHA",
		56:    "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
		57:    "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
		58:    "TLS_DH_anon_WITH_AES_256_CBC_SHA",
		59:    "TLS_RSA_WITH_NULL_SHA256",
		60:    "TLS_RSA_WITH_AES_128_CBC_SHA256",
		61:    "TLS_RSA_WITH_AES_256_CBC_SHA256",
		62:    "TLS_DH_DSS_WITH_AES_128_CBC_SHA256",
		63:    "TLS_DH_RSA_WITH_AES_128_CBC_SHA256",
		64:    "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
		65:    "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",
		66:    "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA",
		67:    "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA",
		68:    "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA",
		69:    "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",
		70:    "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA",
		103:   "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
		104:   "TLS_DH_DSS_WITH_AES_256_CBC_SHA256",
		105:   "TLS_DH_RSA_WITH_AES_256_CBC_SHA256",
		106:   "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
		107:   "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
		108:   "TLS_DH_anon_WITH_AES_128_CBC_SHA256",
		109:   "TLS_DH_anon_WITH_AES_256_CBC_SHA256",
		132:   "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",
		133:   "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA",
		134:   "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA",
		135:   "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA",
		136:   "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",
		137:   "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA",
		138:   "TLS_PSK_WITH_RC4_128_SHA",
		139:   "TLS_PSK_WITH_3DES_EDE_CBC_SHA",
		140:   "TLS_PSK_WITH_AES_128_CBC_SHA",
		141:   "TLS_PSK_WITH_AES_256_CBC_SHA",
		142:   "TLS_DHE_PSK_WITH_RC4_128_SHA",
		143:   "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA",
		144:   "TLS_DHE_PSK_WITH_AES_128_CBC_SHA",
		145:   "TLS_DHE_PSK_WITH_AES_256_CBC_SHA",
		146:   "TLS_RSA_PSK_WITH_RC4_128_SHA",
		147:   "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA",
		148:   "TLS_RSA_PSK_WITH_AES_128_CBC_SHA",
		149:   "TLS_RSA_PSK_WITH_AES_256_CBC_SHA",
		150:   "TLS_RSA_WITH_SEED_CBC_SHA",
		151:   "TLS_DH_DSS_WITH_SEED_CBC_SHA",
		152:   "TLS_DH_RSA_WITH_SEED_CBC_SHA",
		153:   "TLS_DHE_DSS_WITH_SEED_CBC_SHA",
		154:   "TLS_DHE_RSA_WITH_SEED_CBC_SHA",
		155:   "TLS_DH_anon_WITH_SEED_CBC_SHA",
		156:   "TLS_RSA_WITH_AES_128_GCM_SHA256",
		157:   "TLS_RSA_WITH_AES_256_GCM_SHA384",
		158:   "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
		159:   "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
		160:   "TLS_DH_RSA_WITH_AES_128_GCM_SHA256",
		161:   "TLS_DH_RSA_WITH_AES_256_GCM_SHA384",
		162:   "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
		163:   "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
		164:   "TLS_DH_DSS_WITH_AES_128_GCM_SHA256",
		165:   "TLS_DH_DSS_WITH_AES_256_GCM_SHA384",
		166:   "TLS_DH_anon_WITH_AES_128_GCM_SHA256",
		167:   "TLS_DH_anon_WITH_AES_256_GCM_SHA384",
		168:   "TLS_PSK_WITH_AES_128_GCM_SHA256",
		169:   "TLS_PSK_WITH_AES_256_GCM_SHA384",
		170:   "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256",
		171:   "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384",
		172:   "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256",
		173:   "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384",
		174:   "TLS_PSK_WITH_AES_128_CBC_SHA256",
		175:   "TLS_PSK_WITH_AES_256_CBC_SHA384",
		176:   "TLS_PSK_WITH_NULL_SHA256",
		177:   "TLS_PSK_WITH_NULL_SHA384",
		178:   "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256",
		179:   "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384",
		180:   "TLS_DHE_PSK_WITH_NULL_SHA256",
		181:   "TLS_DHE_PSK_WITH_NULL_SHA384",
		182:   "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256",
		183:   "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384",
		184:   "TLS_RSA_PSK_WITH_NULL_SHA256",
		185:   "TLS_RSA_PSK_WITH_NULL_SHA384",
		186:   "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256",
		187:   "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256",
		188:   "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
		189:   "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256",
		190:   "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
		191:   "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256",
		192:   "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256",
		193:   "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256",
		194:   "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256",
		195:   "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256",
		196:   "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256",
		197:   "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256",
		198:   "TLS_SM4_GCM_SM3",
		199:   "TLS_SM4_CCM_SM3",
		255:   "TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
		2570:  "Reserved",
		4864:  "Unassigned",
		4865:  "TLS_AES_128_GCM_SHA256",
		4866:  "TLS_AES_256_GCM_SHA384",
		4867:  "TLS_CHACHA20_POLY1305_SHA256",
		4868:  "TLS_AES_128_CCM_SHA256",
		4869:  "TLS_AES_128_CCM_8_SHA256",
		4870:  "TLS_AEGIS_256_SHA384",
		4871:  "TLS_AEGIS_128L_SHA256",
		22016: "TLS_FALLBACK_SCSV",
		49153: "TLS_ECDH_ECDSA_WITH_NULL_SHA",
		49154: "TLS_ECDH_ECDSA_WITH_RC4_128_SHA",
		49155: "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA",
		49156: "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
		49157: "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
		49158: "TLS_ECDHE_ECDSA_WITH_NULL_SHA",
		49159: "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
		49160: "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
		49161: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
		49162: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
		49163: "TLS_ECDH_RSA_WITH_NULL_SHA",
		49164: "TLS_ECDH_RSA_WITH_RC4_128_SHA",
		49165: "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA",
		49166: "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
		49167: "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
		49168: "TLS_ECDHE_RSA_WITH_NULL_SHA",
		49169: "TLS_ECDHE_RSA_WITH_RC4_128_SHA",
		49170: "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
		49171: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
		49172: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
		49173: "TLS_ECDH_anon_WITH_NULL_SHA",
		49174: "TLS_ECDH_anon_WITH_RC4_128_SHA",
		49175: "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA",
		49176: "TLS_ECDH_anon_WITH_AES_128_CBC_SHA",
		49177: "TLS_ECDH_anon_WITH_AES_256_CBC_SHA",
		49178: "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA",
		49179: "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA",
		49180: "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA",
		49181: "TLS_SRP_SHA_WITH_AES_128_CBC_SHA",
		49182: "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA",
		49183: "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA",
		49184: "TLS_SRP_SHA_WITH_AES_256_CBC_SHA",
		49185: "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA",
		49186: "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA",
		49187: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
		49188: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
		49189: "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
		49190: "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
		49191: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
		49192: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
		49193: "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
		49194: "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
		49195: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
		49196: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
		49197: "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
		49198: "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
		49199: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
		49200: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
		49201: "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
		49202: "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
		49203: "TLS_ECDHE_PSK_WITH_RC4_128_SHA",
		49204: "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA",
		49205: "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA",
		49206: "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA",
		49207: "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256",
		49208: "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384",
		49209: "TLS_ECDHE_PSK_WITH_NULL_SHA",
		49210: "TLS_ECDHE_PSK_WITH_NULL_SHA256",
		49211: "TLS_ECDHE_PSK_WITH_NULL_SHA384",
		49212: "TLS_RSA_WITH_ARIA_128_CBC_SHA256",
		49213: "TLS_RSA_WITH_ARIA_256_CBC_SHA384",
		49214: "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256",
		49215: "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384",
		49216: "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256",
		49217: "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384",
		49218: "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256",
		49219: "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384",
		49220: "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256",
		49221: "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384",
		49222: "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256",
		49223: "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384",
		49224: "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256",
		49225: "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384",
		49226: "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256",
		49227: "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384",
		49228: "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256",
		49229: "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384",
		49230: "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256",
		49231: "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384",
		49232: "TLS_RSA_WITH_ARIA_128_GCM_SHA256",
		49233: "TLS_RSA_WITH_ARIA_256_GCM_SHA384",
		49234: "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256",
		49235: "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384",
		49236: "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256",
		49237: "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384",
		49238: "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256",
		49239: "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384",
		49240: "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256",
		49241: "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384",
		49242: "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256",
		49243: "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384",
		49244: "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256",
		49245: "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384",
		49246: "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256",
		49247: "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384",
		49248: "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256",
		49249: "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384",
		49250: "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256",
		49251: "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384",
		49252: "TLS_PSK_WITH_ARIA_128_CBC_SHA256",
		49253: "TLS_PSK_WITH_ARIA_256_CBC_SHA384",
		49254: "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256",
		49255: "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384",
		49256: "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256",
		49257: "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384",
		49258: "TLS_PSK_WITH_ARIA_128_GCM_SHA256",
		49259: "TLS_PSK_WITH_ARIA_256_GCM_SHA384",
		49260: "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256",
		49261: "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384",
		49262: "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256",
		49263: "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384",
		49264: "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256",
		49265: "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384",
		49266: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
		49267: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
		49268: "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
		49269: "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
		49270: "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
		49271: "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384",
		49272: "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
		49273: "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384",
		49274: "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256",
		49275: "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384",
		49276: "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
		49277: "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
		49278: "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
		49279: "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
		49280: "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256",
		49281: "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384",
		49282: "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256",
		49283: "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384",
		49284: "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256",
		49285: "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384",
		49286: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
		49287: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
		49288: "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
		49289: "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
		49290: "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
		49291: "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
		49292: "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
		49293: "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
		49294: "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256",
		49295: "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384",
		49296: "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256",
		49297: "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384",
		49298: "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256",
		49299: "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384",
		49300: "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256",
		49301: "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384",
		49302: "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
		49303: "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
		49304: "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256",
		49305: "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384",
		49306: "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
		49307: "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
		49308: "TLS_RSA_WITH_AES_128_CCM",
		49309: "TLS_RSA_WITH_AES_256_CCM",
		49310: "TLS_DHE_RSA_WITH_AES_128_CCM",
		49311: "TLS_DHE_RSA_WITH_AES_256_CCM",
		49312: "TLS_RSA_WITH_AES_128_CCM_8",
		49313: "TLS_RSA_WITH_AES_256_CCM_8",
		49314: "TLS_DHE_RSA_WITH_AES_128_CCM_8",
		49315: "TLS_DHE_RSA_WITH_AES_256_CCM_8",
		49316: "TLS_PSK_WITH_AES_128_CCM",
		49317: "TLS_PSK_WITH_AES_256_CCM",
		49318: "TLS_DHE_PSK_WITH_AES_128_CCM",
		49319: "TLS_DHE_PSK_WITH_AES_256_CCM",
		49320: "TLS_PSK_WITH_AES_128_CCM_8",
		49321: "TLS_PSK_WITH_AES_256_CCM_8",
		49322: "TLS_PSK_DHE_WITH_AES_128_CCM_8",
		49323: "TLS_PSK_DHE_WITH_AES_256_CCM_8",
		49324: "TLS_ECDHE_ECDSA_WITH_AES_128_CCM",
		49325: "TLS_ECDHE_ECDSA_WITH_AES_256_CCM",
		49326: "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8",
		49327: "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8",
		49328: "TLS_ECCPWD_WITH_AES_128_GCM_SHA256",
		49329: "TLS_ECCPWD_WITH_AES_256_GCM_SHA384",
		49330: "TLS_ECCPWD_WITH_AES_128_CCM_SHA256",
		49331: "TLS_ECCPWD_WITH_AES_256_CCM_SHA384",
		49332: "TLS_SHA256_SHA256",
		49333: "TLS_SHA384_SHA384",
		49408: "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC",
		49409: "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC",
		49410: "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
		49411: "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L",
		49412: "TLS_GOSTR341112_256_WITH_MAGMA_MGM_L",
		49413: "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S",
		49414: "TLS_GOSTR341112_256_WITH_MAGMA_MGM_S",
		52392: "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
		52393: "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
		52394: "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
		52395: "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256",
		52396: "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
		52397: "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
		52398: "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256",
		53249: "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256",
		53250: "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384",
		53251: "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256",
		53253: "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256",
	}
	Browser_TLSFingerprint_CipherSuite_value = map[string]int32{
		"TLS_NULL_WITH_NULL_NULL":                       0,
		"TLS_RSA_WITH_NULL_MD5":                         1,
		"TLS_RSA_WITH_NULL_SHA":                         2,
		"TLS_RSA_EXPORT_WITH_RC4_40_MD5":                3,
		"TLS_RSA_WITH_RC4_128_MD5":                      4,
		"TLS_RSA_WITH_RC4_128_SHA":                      5,
		"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5":            6,
		"TLS_RSA_WITH_IDEA_CBC_SHA":                     7,
		"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA":             8,
		"TLS_RSA_WITH_DES_CBC_SHA":                      9,
		"TLS_RSA_WITH_3DES_EDE_CBC_SHA":                 10,
		"TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA":          11,
		"TLS_DH_DSS_WITH_DES_CBC_SHA":                   12,
		"TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA":              13,
		"TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA":          14,
		"TLS_DH_RSA_WITH_DES_CBC_SHA":                   15,
		"TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA":              16,
		"TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA":         17,
		"TLS_DHE_DSS_WITH_DES_CBC_SHA":                  18,
		"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA":             19,
		"TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA":         20,
		"TLS_DHE_RSA_WITH_DES_CBC_SHA":                  21,
		"TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA":             22,
		"TLS_DH_anon_EXPORT_WITH_RC4_40_MD5":            23,
		"TLS_DH_anon_WITH_RC4_128_MD5":                  24,
		"TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA":         25,
		"TLS_DH_anon_WITH_DES_CBC_SHA":                  26,
		"TLS_DH_anon_WITH_3DES_EDE_CBC_SHA":             27,
		"TLS_KRB5_WITH_DES_CBC_SHA":                     30,
		"TLS_KRB5_WITH_3DES_EDE_CBC_SHA":                31,
		"TLS_KRB5_WITH_RC4_128_SHA":                     32,
		"TLS_KRB5_WITH_IDEA_CBC_SHA":                    33,
		"TLS_KRB5_WITH_DES_CBC_MD5":                     34,
		"TLS_KRB5_WITH_3DES_EDE_CBC_MD5":                35,
		"TLS_KRB5_WITH_RC4_128_MD5":                     36,
		"TLS_KRB5_WITH_IDEA_CBC_MD5":                    37,
		"TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA":           38,
		"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA":           39,
		"TLS_KRB5_EXPORT_WITH_RC4_40_SHA":               40,
		"TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5":           41,
		"TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5":           42,
		"TLS_KRB5_EXPORT_WITH_RC4_40_MD5":               43,
		"TLS_PSK_WITH_NULL_SHA":                         44,
		"TLS_DHE_PSK_WITH_NULL_SHA":                     45,
		"TLS_RSA_PSK_WITH_NULL_SHA":                     46,
		"TLS_RSA_WITH_AES_128_CBC_SHA":                  47,
		"TLS_DH_DSS_WITH_AES_128_CBC_SHA":               48,
		"TLS_DH_RSA_WITH_AES_128_CBC_SHA":               49,
		"TLS_DHE_DSS_WITH_AES_128_CBC_SHA":              50,
		"TLS_DHE_RSA_WITH_AES_128_CBC_SHA":              51,
		"TLS_DH_anon_WITH_AES_128_CBC_SHA":              52,
		"TLS_RSA_WITH_AES_256_CBC_SHA":                  53,
		"TLS_DH_DSS_WITH_AES_256_CBC_SHA":               54,
		"TLS_DH_RSA_WITH_AES_256_CBC_SHA":               55,
		"TLS_DHE_DSS_WITH_AES_256_CBC_SHA":              56,
		"TLS_DHE_RSA_WITH_AES_256_CBC_SHA":              57,
		"TLS_DH_anon_WITH_AES_256_CBC_SHA":              58,
		"TLS_RSA_WITH_NULL_SHA256":                      59,
		"TLS_RSA_WITH_AES_128_CBC_SHA256":               60,
		"TLS_RSA_WITH_AES_256_CBC_SHA256":               61,
		"TLS_DH_DSS_WITH_AES_128_CBC_SHA256":            62,
		"TLS_DH_RSA_WITH_AES_128_CBC_SHA256":            63,
		"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256":           64,
		"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA":             65,
		"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA":          66,
		"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA":          67,
		"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA":         68,
		"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA":         69,
		"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA":         70,
		"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256":           103,
		"TLS_DH_DSS_WITH_AES_256_CBC_SHA256":            104,
		"TLS_DH_RSA_WITH_AES_256_CBC_SHA256":            105,
		"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256":           106,
		"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256":           107,
		"TLS_DH_anon_WITH_AES_128_CBC_SHA256":           108,
		"TLS_DH_anon_WITH_AES_256_CBC_SHA256":           109,
		"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA":             132,
		"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA":          133,
		"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA":          134,
		"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA":         135,
		"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA":         136,
		"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA":         137,
		"TLS_PSK_WITH_RC4_128_SHA":                      138,
		"TLS_PSK_WITH_3DES_EDE_CBC_SHA":                 139,
		"TLS_PSK_WITH_AES_128_CBC_SHA":                  140,
		"TLS_PSK_WITH_AES_256_CBC_SHA":                  141,
		"TLS_DHE_PSK_WITH_RC4_128_SHA":                  142,
		"TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA":             143,
		"TLS_DHE_PSK_WITH_AES_128_CBC_SHA":              144,
		"TLS_DHE_PSK_WITH_AES_256_CBC_SHA":              145,
		"TLS_RSA_PSK_WITH_RC4_128_SHA":                  146,
		"TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA":             147,
		"TLS_RSA_PSK_WITH_AES_128_CBC_SHA":              148,
		"TLS_RSA_PSK_WITH_AES_256_CBC_SHA":              149,
		"TLS_RSA_WITH_SEED_CBC_SHA":                     150,
		"TLS_DH_DSS_WITH_SEED_CBC_SHA":                  151,
		"TLS_DH_RSA_WITH_SEED_CBC_SHA":                  152,
		"TLS_DHE_DSS_WITH_SEED_CBC_SHA":                 153,
		"TLS_DHE_RSA_WITH_SEED_CBC_SHA":                 154,
		"TLS_DH_anon_WITH_SEED_CBC_SHA":                 155,
		"TLS_RSA_WITH_AES_128_GCM_SHA256":               156,
		"TLS_RSA_WITH_AES_256_GCM_SHA384":               157,
		"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256":           158,
		"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384":           159,
		"TLS_DH_RSA_WITH_AES_128_GCM_SHA256":            160,
		"TLS_DH_RSA_WITH_AES_256_GCM_SHA384":            161,
		"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256":           162,
		"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384":           163,
		"TLS_DH_DSS_WITH_AES_128_GCM_SHA256":            164,
		"TLS_DH_DSS_WITH_AES_256_GCM_SHA384":            165,
		"TLS_DH_anon_WITH_AES_128_GCM_SHA256":           166,
		"TLS_DH_anon_WITH_AES_256_GCM_SHA384":           167,
		"TLS_PSK_WITH_AES_128_GCM_SHA256":               168,
		"TLS_PSK_WITH_AES_256_GCM_SHA384":               169,
		"TLS_DHE_PSK_WITH_AES_128_GCM_SHA256":           170,
		"TLS_DHE_PSK_WITH_AES_256_GCM_SHA384":           171,
		"TLS_RSA_PSK_WITH_AES_128_GCM_SHA256":           172,
		"TLS_RSA_PSK_WITH_AES_256_GCM_SHA384":           173,
		"TLS_PSK_WITH_AES_128_CBC_SHA256":               174,
		"TLS_PSK_WITH_AES_256_CBC_SHA384":               175,
		"TLS_PSK_WITH_NULL_SHA256":                      176,
		"TLS_PSK_WITH_NULL_SHA384":                      177,
		"TLS_DHE_PSK_WITH_AES_128_CBC_SHA256":           178,
		"TLS_DHE_PSK_WITH_AES_256_CBC_SHA384":           179,
		"TLS_DHE_PSK_WITH_NULL_SHA256":                  180,
		"TLS_DHE_PSK_WITH_NULL_SHA384":                  181,
		"TLS_RSA_PSK_WITH_AES_128_CBC_SHA256":           182,
		"TLS_RSA_PSK_WITH_AES_256_CBC_SHA384":           183,
		"TLS_RSA_PSK_WITH_NULL_SHA256":                  184,
		"TLS_RSA_PSK_WITH_NULL_SHA384":                  185,
		"TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256":          186,
		"TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256":       187,
		"TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256":       188,
		"TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256":      189,
		"TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256":      190,
		"TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256":      191,
		"TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256":          192,
		"TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256":       193,
		"TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256":       194,
		"TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256":      195,
		"TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256":      196,
		"TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256":      197,
		"TLS_SM4_GCM_SM3":                               198,
		"TLS_SM4_CCM_SM3":                               199,
		"TLS_EMPTY_RENEGOTIATION_INFO_SCSV":             255,
		"Reserved":                                      2570,
		"Unassigned":                                    4864,
		"TLS_AES_128_GCM_SHA256":                        4865,
		"TLS_AES_256_GCM_SHA384":                        4866,
		"TLS_CHACHA20_POLY1305_SHA256":                  4867,
		"TLS_AES_128_CCM_SHA256":                        4868,
		"TLS_AES_128_CCM_8_SHA256":                      4869,
		"TLS_AEGIS_256_SHA384":                          4870,
		"TLS_AEGIS_128L_SHA256":                         4871,
		"TLS_FALLBACK_SCSV":                             22016,
		"TLS_ECDH_ECDSA_WITH_NULL_SHA":                  49153,
		"TLS_ECDH_ECDSA_WITH_RC4_128_SHA":               49154,
		"TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA":          49155,
		"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA":           49156,
		"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA":           49157,
		"TLS_ECDHE_ECDSA_WITH_NULL_SHA":                 49158,
		"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":              49159,
		"TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA":         49160,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":          49161,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":          49162,
		"TLS_ECDH_RSA_WITH_NULL_SHA":                    49163,
		"TLS_ECDH_RSA_WITH_RC4_128_SHA":                 49164,
		"TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA":            49165,
		"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA":             49166,
		"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA":             49167,
		"TLS_ECDHE_RSA_WITH_NULL_SHA":                   49168,
		"TLS_ECDHE_RSA_WITH_RC4_128_SHA":                49169,
		"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":           49170,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":            49171,
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":            49172,
		"TLS_ECDH_anon_WITH_NULL_SHA":                   49173,
		"TLS_ECDH_anon_WITH_RC4_128_SHA":                49174,
		"TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA":           49175,
		"TLS_ECDH_anon_WITH_AES_128_CBC_SHA":            49176,
		"TLS_ECDH_anon_WITH_AES_256_CBC_SHA":            49177,
		"TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA":             49178,
		"TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA":         49179,
		"TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA":         49180,
		"TLS_SRP_SHA_WITH_AES_128_CBC_SHA":              49181,
		"TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA":          49182,
		"TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA":          49183,
		"TLS_SRP_SHA_WITH_AES_256_CBC_SHA":              49184,
		"TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA":          49185,
		"TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA":          49186,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256":       49187,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384":       49188,
		"TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256":        49189,
		"TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384":        49190,
		"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":         49191,
		"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384":         49192,
		"TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256":          49193,
		"TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384":          49194,
		"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256":       49195,
		"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384":       49196,
		"TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256":        49197,
		"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384":        49198,
		"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":         49199,
		"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":         49200,
		"TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256":          49201,
		"TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384":          49202,
		"TLS_ECDHE_PSK_WITH_RC4_128_SHA":                49203,
		"TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA":           49204,
		"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA":            49205,
		"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA":            49206,
		"TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256":         49207,
		"TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384":         49208,
		"TLS_ECDHE_PSK_WITH_NULL_SHA":                   49209,
		"TLS_ECDHE_PSK_WITH_NULL_SHA256":                49210,
		"TLS_ECDHE_PSK_WITH_NULL_SHA384":                49211,
		"TLS_RSA_WITH_ARIA_128_CBC_SHA256":              49212,
		"TLS_RSA_WITH_ARIA_256_CBC_SHA384":              49213,
		"TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256":           49214,
		"TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384":           49215,
		"TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256":           49216,
		"TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384":           49217,
		"TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256":          49218,
		"TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384":          49219,
		"TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256":          49220,
		"TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384":          49221,
		"TLS_DH_anon_WITH_ARIA_128_CBC_SHA256":          49222,
		"TLS_DH_anon_WITH_ARIA_256_CBC_SHA384":          49223,
		"TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256":      49224,
		"TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384":      49225,
		"TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256":       49226,
		"TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384":       49227,
		"TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256":        49228,
		"TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384":        49229,
		"TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256":         49230,
		"TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384":         49231,
		"TLS_RSA_WITH_ARIA_128_GCM_SHA256":              49232,
		"TLS_RSA_WITH_ARIA_256_GCM_SHA384":              49233,
		"TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256":          49234,
		"TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384":          49235,
		"TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256":           49236,
		"TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384":           49237,
		"TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256":          49238,
		"TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384":          49239,
		"TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256":           49240,
		"TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384":           49241,
		"TLS_DH_anon_WITH_ARIA_128_GCM_SHA256":          49242,
		"TLS_DH_anon_WITH_ARIA_256_GCM_SHA384":          49243,
		"TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256":      49244,
		"TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384":      49245,
		"TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256":       49246,
		"TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384":       49247,
		"TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256":        49248,
		"TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384":        49249,
		"TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256":         49250,
		"TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384":         49251,
		"TLS_PSK_WITH_ARIA_128_CBC_SHA256":              49252,
		"TLS_PSK_WITH_ARIA_256_CBC_SHA384":              49253,
		"TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256":          49254,
		"TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384":          49255,
		"TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256":          49256,
		"TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384":          49257,
		"TLS_PSK_WITH_ARIA_128_GCM_SHA256":              49258,
		"TLS_PSK_WITH_ARIA_256_GCM_SHA384":              49259,
		"TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256":          49260,
		"TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384":          49261,
		"TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256":          49262,
		"TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384":          49263,
		"TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256":        49264,
		"TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384":        49265,
		"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256":  49266,
		"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384":  49267,
		"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256":   49268,
		"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384":   49269,
		"TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256":    49270,
		"TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384":    49271,
		"TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256":     49272,
		"TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384":     49273,
		"TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256":          49274,
		"TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384":          49275,
		"TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256":      49276,
		"TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384":      49277,
		"TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256":       49278,
		"TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384":       49279,
		"TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256":      49280,
		"TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384":      49281,
		"TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256":       49282,
		"TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384":       49283,
		"TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256":      49284,
		"TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384":      49285,
		"TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256":  49286,
		"TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384":  49287,
		"TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256":   49288,
		"TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384":   49289,
		"TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256":    49290,
		"TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384":    49291,
		"TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256":     49292,
		"TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384":     49293,
		"TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256":          49294,
		"TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384":          49295,
		"TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256":      49296,
		"TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384":      49297,
		"TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256":      49298,
		"TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384":      49299,
		"TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256":          49300,
		"TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384":          49301,
		"TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256":      49302,
		"TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384":      49303,
		"TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256":      49304,
		"TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384":      49305,
		"TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256":    49306,
		"TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384":    49307,
		"TLS_RSA_WITH_AES_128_CCM":                      49308,
		"TLS_RSA_WITH_AES_256_CCM":                      49309,
		"TLS_DHE_RSA_WITH_AES_128_CCM":                  49310,
		"TLS_DHE_RSA_WITH_AES_256_CCM":                  49311,
		"TLS_RSA_WITH_AES_128_CCM_8":                    49312,
		"TLS_RSA_WITH_AES_256_CCM_8":                    49313,
		"TLS_DHE_RSA_WITH_AES_128_CCM_8":                49314,
		"TLS_DHE_RSA_WITH_AES_256_CCM_8":                49315,
		"TLS_PSK_WITH_AES_128_CCM":                      49316,
		"TLS_PSK_WITH_AES_256_CCM":                      49317,
		"TLS_DHE_PSK_WITH_AES_128_CCM":                  49318,
		"TLS_DHE_PSK_WITH_AES_256_CCM":                  49319,
		"TLS_PSK_WITH_AES_128_CCM_8":                    49320,
		"TLS_PSK_WITH_AES_256_CCM_8":                    49321,
		"TLS_PSK_DHE_WITH_AES_128_CCM_8":                49322,
		"TLS_PSK_DHE_WITH_AES_256_CCM_8":                49323,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CCM":              49324,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CCM":              49325,
		"TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8":            49326,
		"TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8":            49327,
		"TLS_ECCPWD_WITH_AES_128_GCM_SHA256":            49328,
		"TLS_ECCPWD_WITH_AES_256_GCM_SHA384":            49329,
		"TLS_ECCPWD_WITH_AES_128_CCM_SHA256":            49330,
		"TLS_ECCPWD_WITH_AES_256_CCM_SHA384":            49331,
		"TLS_SHA256_SHA256":                             49332,
		"TLS_SHA384_SHA384":                             49333,
		"TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC":  49408,
		"TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC":       49409,
		"TLS_GOSTR341112_256_WITH_28147_CNT_IMIT":       49410,
		"TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L":     49411,
		"TLS_GOSTR341112_256_WITH_MAGMA_MGM_L":          49412,
		"TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S":     49413,
		"TLS_GOSTR341112_256_WITH_MAGMA_MGM_S":          49414,
		"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256":   52392,
		"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256": 52393,
		"TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256":     52394,
		"TLS_PSK_WITH_CHACHA20_POLY1305_SHA256":         52395,
		"TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256":   52396,
		"TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256":     52397,
		"TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256":     52398,
		"TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256":         53249,
		"TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384":         53250,
		"TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256":       53251,
		"TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256":         53253,
	}
)

func (x Browser_TLSFingerprint_CipherSuite) Enum() *Browser_TLSFingerprint_CipherSuite {
	p := new(Browser_TLSFingerprint_CipherSuite)
	*p = x
	return p
}

func (x Browser_TLSFingerprint_CipherSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Browser_TLSFingerprint_CipherSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[1].Descriptor()
}

func (Browser_TLSFingerprint_CipherSuite) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[1]
}

func (x Browser_TLSFingerprint_CipherSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Browser_TLSFingerprint_CipherSuite.Descriptor instead.
func (Browser_TLSFingerprint_CipherSuite) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0, 1}
}

// - TLS extensions: https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml
type Browser_TLSFingerprint_Extensions int32

const (
	Browser_TLSFingerprint_SERVER_NAME                            Browser_TLSFingerprint_Extensions = 0
	Browser_TLSFingerprint_MAX_FRAGMENT_LENGTH                    Browser_TLSFingerprint_Extensions = 1
	Browser_TLSFingerprint_CLIENT_CERTIFICATE_URL                 Browser_TLSFingerprint_Extensions = 2
	Browser_TLSFingerprint_TRUSTED_CA_KEYS                        Browser_TLSFingerprint_Extensions = 3
	Browser_TLSFingerprint_TRUNCATED_HMAC                         Browser_TLSFingerprint_Extensions = 4
	Browser_TLSFingerprint_STATUS_REQUEST                         Browser_TLSFingerprint_Extensions = 5
	Browser_TLSFingerprint_USER_MAPPING                           Browser_TLSFingerprint_Extensions = 6
	Browser_TLSFingerprint_CLIENT_AUTHZ                           Browser_TLSFingerprint_Extensions = 7
	Browser_TLSFingerprint_SERVER_AUTHZ                           Browser_TLSFingerprint_Extensions = 8
	Browser_TLSFingerprint_CERT_TYPE                              Browser_TLSFingerprint_Extensions = 9
	Browser_TLSFingerprint_SUPPORTED_GROUPS                       Browser_TLSFingerprint_Extensions = 10
	Browser_TLSFingerprint_EC_POINT_FORMATS                       Browser_TLSFingerprint_Extensions = 11
	Browser_TLSFingerprint_SRP                                    Browser_TLSFingerprint_Extensions = 12
	Browser_TLSFingerprint_SIGNATURE_ALGORITHMS                   Browser_TLSFingerprint_Extensions = 13
	Browser_TLSFingerprint_USE_SRTP                               Browser_TLSFingerprint_Extensions = 14
	Browser_TLSFingerprint_HEARTBEAT                              Browser_TLSFingerprint_Extensions = 15
	Browser_TLSFingerprint_APPLICATION_LAYER_PROTOCOL_NEGOTIATION Browser_TLSFingerprint_Extensions = 16
	Browser_TLSFingerprint_STATUS_REQUEST_V2                      Browser_TLSFingerprint_Extensions = 17
	Browser_TLSFingerprint_SIGNED_CERTIFICATE_TIMESTAMP           Browser_TLSFingerprint_Extensions = 18
	Browser_TLSFingerprint_CLIENT_CERTIFICATE_TYPE                Browser_TLSFingerprint_Extensions = 19
	Browser_TLSFingerprint_SERVER_CERTIFICATE_TYPE                Browser_TLSFingerprint_Extensions = 20
	Browser_TLSFingerprint_PADDING                                Browser_TLSFingerprint_Extensions = 21
	Browser_TLSFingerprint_ENCRYPT_THEN_MAC                       Browser_TLSFingerprint_Extensions = 22
	Browser_TLSFingerprint_EXTENDED_MASTER_SECRET                 Browser_TLSFingerprint_Extensions = 23
	Browser_TLSFingerprint_TOKEN_BINDING                          Browser_TLSFingerprint_Extensions = 24
	Browser_TLSFingerprint_CACHED_INFO                            Browser_TLSFingerprint_Extensions = 25
	Browser_TLSFingerprint_TLS_LTS                                Browser_TLSFingerprint_Extensions = 26
	Browser_TLSFingerprint_COMPRESS_CERTIFICATE                   Browser_TLSFingerprint_Extensions = 27
	Browser_TLSFingerprint_RECORD_SIZE_LIMIT                      Browser_TLSFingerprint_Extensions = 28
	Browser_TLSFingerprint_PWD_PROTECT                            Browser_TLSFingerprint_Extensions = 29
	Browser_TLSFingerprint_PWD_CLEAR                              Browser_TLSFingerprint_Extensions = 30
	Browser_TLSFingerprint_PASSWORD_SALT                          Browser_TLSFingerprint_Extensions = 31
	Browser_TLSFingerprint_TICKET_PINNING                         Browser_TLSFingerprint_Extensions = 32
	Browser_TLSFingerprint_TLS_CERT_WITH_EXTERN_PSK               Browser_TLSFingerprint_Extensions = 33
	Browser_TLSFingerprint_DELEGATED_CREDENTIAL                   Browser_TLSFingerprint_Extensions = 34
	Browser_TLSFingerprint_SESSION_TICKET                         Browser_TLSFingerprint_Extensions = 35
	Browser_TLSFingerprint_TLMSP                                  Browser_TLSFingerprint_Extensions = 36
	Browser_TLSFingerprint_TLMSP_PROXYING                         Browser_TLSFingerprint_Extensions = 37
	Browser_TLSFingerprint_TLMSP_DELEGATE                         Browser_TLSFingerprint_Extensions = 38
	Browser_TLSFingerprint_SUPPORTED_EKT_CIPHERS                  Browser_TLSFingerprint_Extensions = 39
	Browser_TLSFingerprint_PRE_SHARED_KEY                         Browser_TLSFingerprint_Extensions = 41
	Browser_TLSFingerprint_EARLY_DATA                             Browser_TLSFingerprint_Extensions = 42
	Browser_TLSFingerprint_SUPPORTED_VERSIONS                     Browser_TLSFingerprint_Extensions = 43
	Browser_TLSFingerprint_COOKIE                                 Browser_TLSFingerprint_Extensions = 44
	Browser_TLSFingerprint_PSK_KEY_EXCHANGE_MODES                 Browser_TLSFingerprint_Extensions = 45
	Browser_TLSFingerprint_CERTIFICATE_AUTHORITIES                Browser_TLSFingerprint_Extensions = 47
	Browser_TLSFingerprint_OID_FILTERS                            Browser_TLSFingerprint_Extensions = 48
	Browser_TLSFingerprint_POST_HANDSHAKE_AUTH                    Browser_TLSFingerprint_Extensions = 49
	Browser_TLSFingerprint_SIGNATURE_ALGORITHMS_CERT              Browser_TLSFingerprint_Extensions = 50
	Browser_TLSFingerprint_KEY_SHARE                              Browser_TLSFingerprint_Extensions = 51
	Browser_TLSFingerprint_TRANSPARENCY_INFO                      Browser_TLSFingerprint_Extensions = 52
	Browser_TLSFingerprint_CONNECTION_ID_DEPRECATED               Browser_TLSFingerprint_Extensions = 53
	Browser_TLSFingerprint_CONNECTION_ID                          Browser_TLSFingerprint_Extensions = 54
	Browser_TLSFingerprint_EXTERNAL_ID_HASH                       Browser_TLSFingerprint_Extensions = 55
	Browser_TLSFingerprint_EXTERNAL_SESSION_ID                    Browser_TLSFingerprint_Extensions = 56
	Browser_TLSFingerprint_QUIC_TRANSPORT_PARAMETERS              Browser_TLSFingerprint_Extensions = 57
	Browser_TLSFingerprint_TICKET_REQUEST                         Browser_TLSFingerprint_Extensions = 58
	Browser_TLSFingerprint_DNSSEC_CHAIN                           Browser_TLSFingerprint_Extensions = 59
	Browser_TLSFingerprint_SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS  Browser_TLSFingerprint_Extensions = 60
	// src: boringssl
	Browser_TLSFingerprint_EXTENSION_APPLICATIONS_SETTINGS Browser_TLSFingerprint_Extensions = 17513
	Browser_TLSFingerprint_EXTENSION_RENEGOTIATION_INFO    Browser_TLSFingerprint_Extensions = 65281
)

// Enum value maps for Browser_TLSFingerprint_Extensions.
var (
	Browser_TLSFingerprint_Extensions_name = map[int32]string{
		0:     "SERVER_NAME",
		1:     "MAX_FRAGMENT_LENGTH",
		2:     "CLIENT_CERTIFICATE_URL",
		3:     "TRUSTED_CA_KEYS",
		4:     "TRUNCATED_HMAC",
		5:     "STATUS_REQUEST",
		6:     "USER_MAPPING",
		7:     "CLIENT_AUTHZ",
		8:     "SERVER_AUTHZ",
		9:     "CERT_TYPE",
		10:    "SUPPORTED_GROUPS",
		11:    "EC_POINT_FORMATS",
		12:    "SRP",
		13:    "SIGNATURE_ALGORITHMS",
		14:    "USE_SRTP",
		15:    "HEARTBEAT",
		16:    "APPLICATION_LAYER_PROTOCOL_NEGOTIATION",
		17:    "STATUS_REQUEST_V2",
		18:    "SIGNED_CERTIFICATE_TIMESTAMP",
		19:    "CLIENT_CERTIFICATE_TYPE",
		20:    "SERVER_CERTIFICATE_TYPE",
		21:    "PADDING",
		22:    "ENCRYPT_THEN_MAC",
		23:    "EXTENDED_MASTER_SECRET",
		24:    "TOKEN_BINDING",
		25:    "CACHED_INFO",
		26:    "TLS_LTS",
		27:    "COMPRESS_CERTIFICATE",
		28:    "RECORD_SIZE_LIMIT",
		29:    "PWD_PROTECT",
		30:    "PWD_CLEAR",
		31:    "PASSWORD_SALT",
		32:    "TICKET_PINNING",
		33:    "TLS_CERT_WITH_EXTERN_PSK",
		34:    "DELEGATED_CREDENTIAL",
		35:    "SESSION_TICKET",
		36:    "TLMSP",
		37:    "TLMSP_PROXYING",
		38:    "TLMSP_DELEGATE",
		39:    "SUPPORTED_EKT_CIPHERS",
		41:    "PRE_SHARED_KEY",
		42:    "EARLY_DATA",
		43:    "SUPPORTED_VERSIONS",
		44:    "COOKIE",
		45:    "PSK_KEY_EXCHANGE_MODES",
		47:    "CERTIFICATE_AUTHORITIES",
		48:    "OID_FILTERS",
		49:    "POST_HANDSHAKE_AUTH",
		50:    "SIGNATURE_ALGORITHMS_CERT",
		51:    "KEY_SHARE",
		52:    "TRANSPARENCY_INFO",
		53:    "CONNECTION_ID_DEPRECATED",
		54:    "CONNECTION_ID",
		55:    "EXTERNAL_ID_HASH",
		56:    "EXTERNAL_SESSION_ID",
		57:    "QUIC_TRANSPORT_PARAMETERS",
		58:    "TICKET_REQUEST",
		59:    "DNSSEC_CHAIN",
		60:    "SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS",
		17513: "EXTENSION_APPLICATIONS_SETTINGS",
		65281: "EXTENSION_RENEGOTIATION_INFO",
	}
	Browser_TLSFingerprint_Extensions_value = map[string]int32{
		"SERVER_NAME":                            0,
		"MAX_FRAGMENT_LENGTH":                    1,
		"CLIENT_CERTIFICATE_URL":                 2,
		"TRUSTED_CA_KEYS":                        3,
		"TRUNCATED_HMAC":                         4,
		"STATUS_REQUEST":                         5,
		"USER_MAPPING":                           6,
		"CLIENT_AUTHZ":                           7,
		"SERVER_AUTHZ":                           8,
		"CERT_TYPE":                              9,
		"SUPPORTED_GROUPS":                       10,
		"EC_POINT_FORMATS":                       11,
		"SRP":                                    12,
		"SIGNATURE_ALGORITHMS":                   13,
		"USE_SRTP":                               14,
		"HEARTBEAT":                              15,
		"APPLICATION_LAYER_PROTOCOL_NEGOTIATION": 16,
		"STATUS_REQUEST_V2":                      17,
		"SIGNED_CERTIFICATE_TIMESTAMP":           18,
		"CLIENT_CERTIFICATE_TYPE":                19,
		"SERVER_CERTIFICATE_TYPE":                20,
		"PADDING":                                21,
		"ENCRYPT_THEN_MAC":                       22,
		"EXTENDED_MASTER_SECRET":                 23,
		"TOKEN_BINDING":                          24,
		"CACHED_INFO":                            25,
		"TLS_LTS":                                26,
		"COMPRESS_CERTIFICATE":                   27,
		"RECORD_SIZE_LIMIT":                      28,
		"PWD_PROTECT":                            29,
		"PWD_CLEAR":                              30,
		"PASSWORD_SALT":                          31,
		"TICKET_PINNING":                         32,
		"TLS_CERT_WITH_EXTERN_PSK":               33,
		"DELEGATED_CREDENTIAL":                   34,
		"SESSION_TICKET":                         35,
		"TLMSP":                                  36,
		"TLMSP_PROXYING":                         37,
		"TLMSP_DELEGATE":                         38,
		"SUPPORTED_EKT_CIPHERS":                  39,
		"PRE_SHARED_KEY":                         41,
		"EARLY_DATA":                             42,
		"SUPPORTED_VERSIONS":                     43,
		"COOKIE":                                 44,
		"PSK_KEY_EXCHANGE_MODES":                 45,
		"CERTIFICATE_AUTHORITIES":                47,
		"OID_FILTERS":                            48,
		"POST_HANDSHAKE_AUTH":                    49,
		"SIGNATURE_ALGORITHMS_CERT":              50,
		"KEY_SHARE":                              51,
		"TRANSPARENCY_INFO":                      52,
		"CONNECTION_ID_DEPRECATED":               53,
		"CONNECTION_ID":                          54,
		"EXTERNAL_ID_HASH":                       55,
		"EXTERNAL_SESSION_ID":                    56,
		"QUIC_TRANSPORT_PARAMETERS":              57,
		"TICKET_REQUEST":                         58,
		"DNSSEC_CHAIN":                           59,
		"SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS":  60,
		"EXTENSION_APPLICATIONS_SETTINGS":        17513,
		"EXTENSION_RENEGOTIATION_INFO":           65281,
	}
)

func (x Browser_TLSFingerprint_Extensions) Enum() *Browser_TLSFingerprint_Extensions {
	p := new(Browser_TLSFingerprint_Extensions)
	*p = x
	return p
}

func (x Browser_TLSFingerprint_Extensions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Browser_TLSFingerprint_Extensions) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[2].Descriptor()
}

func (Browser_TLSFingerprint_Extensions) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[2]
}

func (x Browser_TLSFingerprint_Extensions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Browser_TLSFingerprint_Extensions.Descriptor instead.
func (Browser_TLSFingerprint_Extensions) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0, 2}
}

// - Elliptic curves: https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8
type Browser_TLSFingerprint_EllipticCurve int32

const (
	Browser_TLSFingerprint_RESERVED                        Browser_TLSFingerprint_EllipticCurve = 0
	Browser_TLSFingerprint_SECT163K1                       Browser_TLSFingerprint_EllipticCurve = 1
	Browser_TLSFingerprint_SECT163R1                       Browser_TLSFingerprint_EllipticCurve = 2
	Browser_TLSFingerprint_SECT163R2                       Browser_TLSFingerprint_EllipticCurve = 3
	Browser_TLSFingerprint_SECT193R1                       Browser_TLSFingerprint_EllipticCurve = 4
	Browser_TLSFingerprint_SECT193R2                       Browser_TLSFingerprint_EllipticCurve = 5
	Browser_TLSFingerprint_SECT233K1                       Browser_TLSFingerprint_EllipticCurve = 6
	Browser_TLSFingerprint_SECT233R1                       Browser_TLSFingerprint_EllipticCurve = 7
	Browser_TLSFingerprint_SECT239K1                       Browser_TLSFingerprint_EllipticCurve = 8
	Browser_TLSFingerprint_SECT283K1                       Browser_TLSFingerprint_EllipticCurve = 9
	Browser_TLSFingerprint_SECT283R1                       Browser_TLSFingerprint_EllipticCurve = 10
	Browser_TLSFingerprint_SECT409K1                       Browser_TLSFingerprint_EllipticCurve = 11
	Browser_TLSFingerprint_SECT409R1                       Browser_TLSFingerprint_EllipticCurve = 12
	Browser_TLSFingerprint_SECT571K1                       Browser_TLSFingerprint_EllipticCurve = 13
	Browser_TLSFingerprint_SECT571R1                       Browser_TLSFingerprint_EllipticCurve = 14
	Browser_TLSFingerprint_SECP160K1                       Browser_TLSFingerprint_EllipticCurve = 15
	Browser_TLSFingerprint_SECP160R1                       Browser_TLSFingerprint_EllipticCurve = 16
	Browser_TLSFingerprint_SECP160R2                       Browser_TLSFingerprint_EllipticCurve = 17
	Browser_TLSFingerprint_SECP192K1                       Browser_TLSFingerprint_EllipticCurve = 18
	Browser_TLSFingerprint_SECP192R1                       Browser_TLSFingerprint_EllipticCurve = 19
	Browser_TLSFingerprint_SECP224K1                       Browser_TLSFingerprint_EllipticCurve = 20
	Browser_TLSFingerprint_SECP224R1                       Browser_TLSFingerprint_EllipticCurve = 21
	Browser_TLSFingerprint_SECP256K1                       Browser_TLSFingerprint_EllipticCurve = 22
	Browser_TLSFingerprint_SECP256R1                       Browser_TLSFingerprint_EllipticCurve = 23
	Browser_TLSFingerprint_SECP384R1                       Browser_TLSFingerprint_EllipticCurve = 24
	Browser_TLSFingerprint_SECP521R1                       Browser_TLSFingerprint_EllipticCurve = 25
	Browser_TLSFingerprint_BRAINPOOLP256R1                 Browser_TLSFingerprint_EllipticCurve = 26
	Browser_TLSFingerprint_BRAINPOOLP384R1                 Browser_TLSFingerprint_EllipticCurve = 27
	Browser_TLSFingerprint_BRAINPOOLP512R1                 Browser_TLSFingerprint_EllipticCurve = 28
	Browser_TLSFingerprint_X25519                          Browser_TLSFingerprint_EllipticCurve = 29
	Browser_TLSFingerprint_X448                            Browser_TLSFingerprint_EllipticCurve = 30
	Browser_TLSFingerprint_BRAINPOOLP256R1TLS13            Browser_TLSFingerprint_EllipticCurve = 31
	Browser_TLSFingerprint_BRAINPOOLP384R1TLS13            Browser_TLSFingerprint_EllipticCurve = 32
	Browser_TLSFingerprint_BRAINPOOLP512R1TLS13            Browser_TLSFingerprint_EllipticCurve = 33
	Browser_TLSFingerprint_GC256A                          Browser_TLSFingerprint_EllipticCurve = 34
	Browser_TLSFingerprint_GC256B                          Browser_TLSFingerprint_EllipticCurve = 35
	Browser_TLSFingerprint_GC256C                          Browser_TLSFingerprint_EllipticCurve = 36
	Browser_TLSFingerprint_GC256D                          Browser_TLSFingerprint_EllipticCurve = 37
	Browser_TLSFingerprint_GC512A                          Browser_TLSFingerprint_EllipticCurve = 38
	Browser_TLSFingerprint_GC512B                          Browser_TLSFingerprint_EllipticCurve = 39
	Browser_TLSFingerprint_GC512C                          Browser_TLSFingerprint_EllipticCurve = 40
	Browser_TLSFingerprint_CURVESM2                        Browser_TLSFingerprint_EllipticCurve = 41
	Browser_TLSFingerprint_FFDHE2048                       Browser_TLSFingerprint_EllipticCurve = 256
	Browser_TLSFingerprint_FFDHE3072                       Browser_TLSFingerprint_EllipticCurve = 257
	Browser_TLSFingerprint_FFDHE4096                       Browser_TLSFingerprint_EllipticCurve = 258
	Browser_TLSFingerprint_FFDHE6144                       Browser_TLSFingerprint_EllipticCurve = 259
	Browser_TLSFingerprint_FFDHE8192                       Browser_TLSFingerprint_EllipticCurve = 260
	Browser_TLSFingerprint_ARBITRARY_EXPLICIT_PRIME_CURVES Browser_TLSFingerprint_EllipticCurve = 65281
	Browser_TLSFingerprint_ARBITRARY_EXPLICIT_CHAR2_CURVES Browser_TLSFingerprint_EllipticCurve = 65282
)

// Enum value maps for Browser_TLSFingerprint_EllipticCurve.
var (
	Browser_TLSFingerprint_EllipticCurve_name = map[int32]string{
		0:     "RESERVED",
		1:     "SECT163K1",
		2:     "SECT163R1",
		3:     "SECT163R2",
		4:     "SECT193R1",
		5:     "SECT193R2",
		6:     "SECT233K1",
		7:     "SECT233R1",
		8:     "SECT239K1",
		9:     "SECT283K1",
		10:    "SECT283R1",
		11:    "SECT409K1",
		12:    "SECT409R1",
		13:    "SECT571K1",
		14:    "SECT571R1",
		15:    "SECP160K1",
		16:    "SECP160R1",
		17:    "SECP160R2",
		18:    "SECP192K1",
		19:    "SECP192R1",
		20:    "SECP224K1",
		21:    "SECP224R1",
		22:    "SECP256K1",
		23:    "SECP256R1",
		24:    "SECP384R1",
		25:    "SECP521R1",
		26:    "BRAINPOOLP256R1",
		27:    "BRAINPOOLP384R1",
		28:    "BRAINPOOLP512R1",
		29:    "X25519",
		30:    "X448",
		31:    "BRAINPOOLP256R1TLS13",
		32:    "BRAINPOOLP384R1TLS13",
		33:    "BRAINPOOLP512R1TLS13",
		34:    "GC256A",
		35:    "GC256B",
		36:    "GC256C",
		37:    "GC256D",
		38:    "GC512A",
		39:    "GC512B",
		40:    "GC512C",
		41:    "CURVESM2",
		256:   "FFDHE2048",
		257:   "FFDHE3072",
		258:   "FFDHE4096",
		259:   "FFDHE6144",
		260:   "FFDHE8192",
		65281: "ARBITRARY_EXPLICIT_PRIME_CURVES",
		65282: "ARBITRARY_EXPLICIT_CHAR2_CURVES",
	}
	Browser_TLSFingerprint_EllipticCurve_value = map[string]int32{
		"RESERVED":                        0,
		"SECT163K1":                       1,
		"SECT163R1":                       2,
		"SECT163R2":                       3,
		"SECT193R1":                       4,
		"SECT193R2":                       5,
		"SECT233K1":                       6,
		"SECT233R1":                       7,
		"SECT239K1":                       8,
		"SECT283K1":                       9,
		"SECT283R1":                       10,
		"SECT409K1":                       11,
		"SECT409R1":                       12,
		"SECT571K1":                       13,
		"SECT571R1":                       14,
		"SECP160K1":                       15,
		"SECP160R1":                       16,
		"SECP160R2":                       17,
		"SECP192K1":                       18,
		"SECP192R1":                       19,
		"SECP224K1":                       20,
		"SECP224R1":                       21,
		"SECP256K1":                       22,
		"SECP256R1":                       23,
		"SECP384R1":                       24,
		"SECP521R1":                       25,
		"BRAINPOOLP256R1":                 26,
		"BRAINPOOLP384R1":                 27,
		"BRAINPOOLP512R1":                 28,
		"X25519":                          29,
		"X448":                            30,
		"BRAINPOOLP256R1TLS13":            31,
		"BRAINPOOLP384R1TLS13":            32,
		"BRAINPOOLP512R1TLS13":            33,
		"GC256A":                          34,
		"GC256B":                          35,
		"GC256C":                          36,
		"GC256D":                          37,
		"GC512A":                          38,
		"GC512B":                          39,
		"GC512C":                          40,
		"CURVESM2":                        41,
		"FFDHE2048":                       256,
		"FFDHE3072":                       257,
		"FFDHE4096":                       258,
		"FFDHE6144":                       259,
		"FFDHE8192":                       260,
		"ARBITRARY_EXPLICIT_PRIME_CURVES": 65281,
		"ARBITRARY_EXPLICIT_CHAR2_CURVES": 65282,
	}
)

func (x Browser_TLSFingerprint_EllipticCurve) Enum() *Browser_TLSFingerprint_EllipticCurve {
	p := new(Browser_TLSFingerprint_EllipticCurve)
	*p = x
	return p
}

func (x Browser_TLSFingerprint_EllipticCurve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Browser_TLSFingerprint_EllipticCurve) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[3].Descriptor()
}

func (Browser_TLSFingerprint_EllipticCurve) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[3]
}

func (x Browser_TLSFingerprint_EllipticCurve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Browser_TLSFingerprint_EllipticCurve.Descriptor instead.
func (Browser_TLSFingerprint_EllipticCurve) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0, 3}
}

// https://www.rfc-editor.org/rfc/rfc4492#section-5.1.2
type Browser_TLSFingerprint_EllipticCurvePointFormat int32

const (
	Browser_TLSFingerprint_UNCOMPRESSED               Browser_TLSFingerprint_EllipticCurvePointFormat = 0
	Browser_TLSFingerprint_ANSI_X962_COMPRESSED_PRIME Browser_TLSFingerprint_EllipticCurvePointFormat = 1
	Browser_TLSFingerprint_ANSI_X962_COMPRESSED_CHAR2 Browser_TLSFingerprint_EllipticCurvePointFormat = 2
)

// Enum value maps for Browser_TLSFingerprint_EllipticCurvePointFormat.
var (
	Browser_TLSFingerprint_EllipticCurvePointFormat_name = map[int32]string{
		0: "UNCOMPRESSED",
		1: "ANSI_X962_COMPRESSED_PRIME",
		2: "ANSI_X962_COMPRESSED_CHAR2",
	}
	Browser_TLSFingerprint_EllipticCurvePointFormat_value = map[string]int32{
		"UNCOMPRESSED":               0,
		"ANSI_X962_COMPRESSED_PRIME": 1,
		"ANSI_X962_COMPRESSED_CHAR2": 2,
	}
)

func (x Browser_TLSFingerprint_EllipticCurvePointFormat) Enum() *Browser_TLSFingerprint_EllipticCurvePointFormat {
	p := new(Browser_TLSFingerprint_EllipticCurvePointFormat)
	*p = x
	return p
}

func (x Browser_TLSFingerprint_EllipticCurvePointFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Browser_TLSFingerprint_EllipticCurvePointFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[4].Descriptor()
}

func (Browser_TLSFingerprint_EllipticCurvePointFormat) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[4]
}

func (x Browser_TLSFingerprint_EllipticCurvePointFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Browser_TLSFingerprint_EllipticCurvePointFormat.Descriptor instead.
func (Browser_TLSFingerprint_EllipticCurvePointFormat) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0, 4}
}

type GPSLocation_LocationProvider int32

const (
	GPSLocation_LocationProvider_NONE GPSLocation_LocationProvider = 0 // Treat as random
	GPSLocation_GPS                   GPSLocation_LocationProvider = 1
	GPSLocation_NETWORK               GPSLocation_LocationProvider = 2
	GPSLocation_PASSIVE               GPSLocation_LocationProvider = 3
)

// Enum value maps for GPSLocation_LocationProvider.
var (
	GPSLocation_LocationProvider_name = map[int32]string{
		0: "LocationProvider_NONE",
		1: "GPS",
		2: "NETWORK",
		3: "PASSIVE",
	}
	GPSLocation_LocationProvider_value = map[string]int32{
		"LocationProvider_NONE": 0,
		"GPS":                   1,
		"NETWORK":               2,
		"PASSIVE":               3,
	}
)

func (x GPSLocation_LocationProvider) Enum() *GPSLocation_LocationProvider {
	p := new(GPSLocation_LocationProvider)
	*p = x
	return p
}

func (x GPSLocation_LocationProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPSLocation_LocationProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[5].Descriptor()
}

func (GPSLocation_LocationProvider) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[5]
}

func (x GPSLocation_LocationProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPSLocation_LocationProvider.Descriptor instead.
func (GPSLocation_LocationProvider) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{1, 0}
}

type CPUData_Architecture int32

const (
	CPUData_UNKNOWN CPUData_Architecture = 0
	CPUData_ARM     CPUData_Architecture = 1
	CPUData_ARM64   CPUData_Architecture = 2
	CPUData_MIPS    CPUData_Architecture = 3
	CPUData_MIPSEL  CPUData_Architecture = 4
	CPUData_PPC     CPUData_Architecture = 5
	CPUData_PPC64   CPUData_Architecture = 6
	CPUData_X32     CPUData_Architecture = 7
	CPUData_X64     CPUData_Architecture = 8
)

// Enum value maps for CPUData_Architecture.
var (
	CPUData_Architecture_name = map[int32]string{
		0: "UNKNOWN",
		1: "ARM",
		2: "ARM64",
		3: "MIPS",
		4: "MIPSEL",
		5: "PPC",
		6: "PPC64",
		7: "X32",
		8: "X64",
	}
	CPUData_Architecture_value = map[string]int32{
		"UNKNOWN": 0,
		"ARM":     1,
		"ARM64":   2,
		"MIPS":    3,
		"MIPSEL":  4,
		"PPC":     5,
		"PPC64":   6,
		"X32":     7,
		"X64":     8,
	}
)

func (x CPUData_Architecture) Enum() *CPUData_Architecture {
	p := new(CPUData_Architecture)
	*p = x
	return p
}

func (x CPUData_Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CPUData_Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[6].Descriptor()
}

func (CPUData_Architecture) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[6]
}

func (x CPUData_Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CPUData_Architecture.Descriptor instead.
func (CPUData_Architecture) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{7, 0}
}

// Src: https://apilevels.com/
// BuildNumber defaults: https://source.android.com/docs/setup/about/build-numbers#source-code-tags-and-builds
type AndroidDevice_Version int32

const (
	AndroidDevice_AndroidVersion_NONE AndroidDevice_Version = 0
	AndroidDevice_V1_0                AndroidDevice_Version = 1  // BASE
	AndroidDevice_V1_1                AndroidDevice_Version = 2  // BASE_1_1
	AndroidDevice_V1_5                AndroidDevice_Version = 3  // CUPCAKE
	AndroidDevice_V1_6                AndroidDevice_Version = 4  // DONUT
	AndroidDevice_V2                  AndroidDevice_Version = 5  // ECLAIR
	AndroidDevice_V2_0_1              AndroidDevice_Version = 6  // ECLAIR_0_1
	AndroidDevice_V2_1                AndroidDevice_Version = 7  // ECLAIR_MR1
	AndroidDevice_V2_2                AndroidDevice_Version = 8  // FROYO
	AndroidDevice_V2_3_2              AndroidDevice_Version = 9  // GINGERBREAD
	AndroidDevice_V2_3_7              AndroidDevice_Version = 10 // GINGERBREAD_MR1
	AndroidDevice_V3_0                AndroidDevice_Version = 11 // HONEYCOMB
	AndroidDevice_v3_1                AndroidDevice_Version = 12 // HONEYCOMB_MR1
	AndroidDevice_V3_2                AndroidDevice_Version = 13 // HONEYCOMB_MR2
	AndroidDevice_V4_0_2              AndroidDevice_Version = 14 // ICE_CREAM_SANDWICH
	AndroidDevice_V4_0_4              AndroidDevice_Version = 15 // ICE_CREAM_SANDWICH_MR1
	AndroidDevice_V4_1                AndroidDevice_Version = 16 // JELLY_BEAN
	AndroidDevice_V4_2                AndroidDevice_Version = 17 // JELLY_BEAN_MR1
	AndroidDevice_V4_3                AndroidDevice_Version = 18 // JELLY_BEAN_MR2
	AndroidDevice_V4_4                AndroidDevice_Version = 19 // KITKAT
	AndroidDevice_V4_4W               AndroidDevice_Version = 20 // KITKAT_WATCH
	AndroidDevice_V5_0                AndroidDevice_Version = 21 // LOLLIPOP / L
	AndroidDevice_V5_1                AndroidDevice_Version = 22 // LOLLIPOP_MR1
	AndroidDevice_V6_0                AndroidDevice_Version = 23 // M
	AndroidDevice_V7_0                AndroidDevice_Version = 24 // N
	AndroidDevice_V7_1                AndroidDevice_Version = 25 // N_MR1
	AndroidDevice_V8_0                AndroidDevice_Version = 26 // O
	AndroidDevice_V8_1                AndroidDevice_Version = 27 // O_MR1
	AndroidDevice_V9_0                AndroidDevice_Version = 28 // P
	AndroidDevice_V10_0               AndroidDevice_Version = 29 // Q
	AndroidDevice_V11_0               AndroidDevice_Version = 30 // R
	AndroidDevice_V12_0               AndroidDevice_Version = 31 // S
	AndroidDevice_V12_0L              AndroidDevice_Version = 32 // S_V2
	AndroidDevice_V13_0               AndroidDevice_Version = 33 // TIRAMISU
	AndroidDevice_V14_0               AndroidDevice_Version = 34 // UPSIDE_DOWN_CAKE
)

// Enum value maps for AndroidDevice_Version.
var (
	AndroidDevice_Version_name = map[int32]string{
		0:  "AndroidVersion_NONE",
		1:  "V1_0",
		2:  "V1_1",
		3:  "V1_5",
		4:  "V1_6",
		5:  "V2",
		6:  "V2_0_1",
		7:  "V2_1",
		8:  "V2_2",
		9:  "V2_3_2",
		10: "V2_3_7",
		11: "V3_0",
		12: "v3_1",
		13: "V3_2",
		14: "V4_0_2",
		15: "V4_0_4",
		16: "V4_1",
		17: "V4_2",
		18: "V4_3",
		19: "V4_4",
		20: "V4_4W",
		21: "V5_0",
		22: "V5_1",
		23: "V6_0",
		24: "V7_0",
		25: "V7_1",
		26: "V8_0",
		27: "V8_1",
		28: "V9_0",
		29: "V10_0",
		30: "V11_0",
		31: "V12_0",
		32: "V12_0L",
		33: "V13_0",
		34: "V14_0",
	}
	AndroidDevice_Version_value = map[string]int32{
		"AndroidVersion_NONE": 0,
		"V1_0":                1,
		"V1_1":                2,
		"V1_5":                3,
		"V1_6":                4,
		"V2":                  5,
		"V2_0_1":              6,
		"V2_1":                7,
		"V2_2":                8,
		"V2_3_2":              9,
		"V2_3_7":              10,
		"V3_0":                11,
		"v3_1":                12,
		"V3_2":                13,
		"V4_0_2":              14,
		"V4_0_4":              15,
		"V4_1":                16,
		"V4_2":                17,
		"V4_3":                18,
		"V4_4":                19,
		"V4_4W":               20,
		"V5_0":                21,
		"V5_1":                22,
		"V6_0":                23,
		"V7_0":                24,
		"V7_1":                25,
		"V8_0":                26,
		"V8_1":                27,
		"V9_0":                28,
		"V10_0":               29,
		"V11_0":               30,
		"V12_0":               31,
		"V12_0L":              32,
		"V13_0":               33,
		"V14_0":               34,
	}
)

func (x AndroidDevice_Version) Enum() *AndroidDevice_Version {
	p := new(AndroidDevice_Version)
	*p = x
	return p
}

func (x AndroidDevice_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidDevice_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_device_utils_device_utils_proto_enumTypes[7].Descriptor()
}

func (AndroidDevice_Version) Type() protoreflect.EnumType {
	return &file_proto_device_utils_device_utils_proto_enumTypes[7]
}

func (x AndroidDevice_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AndroidDevice_Version.Descriptor instead.
func (AndroidDevice_Version) EnumDescriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{8, 0}
}

type Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string                  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Name           string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserAgent      string                  `protobuf:"bytes,3,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	BrandHeader    string                  `protobuf:"bytes,4,opt,name=brandHeader,proto3" json:"brandHeader,omitempty"`
	TlsFingerprint *Browser_TLSFingerprint `protobuf:"bytes,5,opt,name=tlsFingerprint,proto3" json:"tlsFingerprint,omitempty"`
}

func (x *Browser) Reset() {
	*x = Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser) ProtoMessage() {}

func (x *Browser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser.ProtoReflect.Descriptor instead.
func (*Browser) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0}
}

func (x *Browser) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Browser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Browser) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Browser) GetBrandHeader() string {
	if x != nil {
		return x.BrandHeader
	}
	return ""
}

func (x *Browser) GetTlsFingerprint() *Browser_TLSFingerprint {
	if x != nil {
		return x.TlsFingerprint
	}
	return nil
}

// Potentially common for more than just Android
type GPSLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64                      `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float64                      `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Altitude  float64                      `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Provider  GPSLocation_LocationProvider `protobuf:"varint,4,opt,name=provider,proto3,enum=device_utils.GPSLocation_LocationProvider" json:"provider,omitempty"`
}

func (x *GPSLocation) Reset() {
	*x = GPSLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPSLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSLocation) ProtoMessage() {}

func (x *GPSLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSLocation.ProtoReflect.Descriptor instead.
func (*GPSLocation) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{1}
}

func (x *GPSLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSLocation) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GPSLocation) GetProvider() GPSLocation_LocationProvider {
	if x != nil {
		return x.Provider
	}
	return GPSLocation_LocationProvider_NONE
}

type Locale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	CountryISO string `protobuf:"bytes,2,opt,name=countryISO,proto3" json:"countryISO,omitempty"`
}

func (x *Locale) Reset() {
	*x = Locale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locale) ProtoMessage() {}

func (x *Locale) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locale.ProtoReflect.Descriptor instead.
func (*Locale) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{2}
}

func (x *Locale) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Locale) GetCountryISO() string {
	if x != nil {
		return x.CountryISO
	}
	return ""
}

type SIMCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// With or without country code?
	PhoneNumber string `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	// Provider and country information
	MCC         string        `protobuf:"bytes,2,opt,name=MCC,proto3" json:"MCC,omitempty"`
	MNC         string        `protobuf:"bytes,3,opt,name=MNC,proto3" json:"MNC,omitempty"`
	Carrier     string        `protobuf:"bytes,4,opt,name=carrier,proto3" json:"carrier,omitempty"`
	CountryISO  string        `protobuf:"bytes,5,opt,name=countryISO,proto3" json:"countryISO,omitempty"`
	CountryCode string        `protobuf:"bytes,6,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Imei        *SIMCard_IMEI `protobuf:"bytes,7,opt,name=imei,proto3" json:"imei,omitempty"`
	Meid        *SIMCard_MEID `protobuf:"bytes,8,opt,name=meid,proto3" json:"meid,omitempty"`
}

func (x *SIMCard) Reset() {
	*x = SIMCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SIMCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIMCard) ProtoMessage() {}

func (x *SIMCard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIMCard.ProtoReflect.Descriptor instead.
func (*SIMCard) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{3}
}

func (x *SIMCard) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SIMCard) GetMCC() string {
	if x != nil {
		return x.MCC
	}
	return ""
}

func (x *SIMCard) GetMNC() string {
	if x != nil {
		return x.MNC
	}
	return ""
}

func (x *SIMCard) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *SIMCard) GetCountryISO() string {
	if x != nil {
		return x.CountryISO
	}
	return ""
}

func (x *SIMCard) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SIMCard) GetImei() *SIMCard_IMEI {
	if x != nil {
		return x.Imei
	}
	return nil
}

func (x *SIMCard) GetMeid() *SIMCard_MEID {
	if x != nil {
		return x.Meid
	}
	return nil
}

type MAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OUI     string `protobuf:"bytes,1,opt,name=OUI,proto3" json:"OUI,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MAC) Reset() {
	*x = MAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAC) ProtoMessage() {}

func (x *MAC) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAC.ProtoReflect.Descriptor instead.
func (*MAC) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{4}
}

func (x *MAC) GetOUI() string {
	if x != nil {
		return x.OUI
	}
	return ""
}

func (x *MAC) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Timezone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IANA standard
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Timezone) Reset() {
	*x = Timezone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timezone) ProtoMessage() {}

func (x *Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timezone.ProtoReflect.Descriptor instead.
func (*Timezone) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{5}
}

func (x *Timezone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ScreenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Density              int32 `protobuf:"varint,1,opt,name=density,proto3" json:"density,omitempty"`                           // in DPI
	ResolutionHorizontal int32 `protobuf:"varint,2,opt,name=resolutionHorizontal,proto3" json:"resolutionHorizontal,omitempty"` // in pixels
	ResolutionVertical   int32 `protobuf:"varint,3,opt,name=resolutionVertical,proto3" json:"resolutionVertical,omitempty"`     // in pixels
}

func (x *ScreenData) Reset() {
	*x = ScreenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenData) ProtoMessage() {}

func (x *ScreenData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenData.ProtoReflect.Descriptor instead.
func (*ScreenData) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{6}
}

func (x *ScreenData) GetDensity() int32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *ScreenData) GetResolutionHorizontal() int32 {
	if x != nil {
		return x.ResolutionHorizontal
	}
	return 0
}

func (x *ScreenData) GetResolutionVertical() int32 {
	if x != nil {
		return x.ResolutionVertical
	}
	return 0
}

type CPUData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arch     CPUData_Architecture `protobuf:"varint,1,opt,name=arch,proto3,enum=device_utils.CPUData_Architecture" json:"arch,omitempty"`
	ArchName string               `protobuf:"bytes,2,opt,name=archName,proto3" json:"archName,omitempty"`
	Model    string               `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Brand    string               `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`
	Board    string               `protobuf:"bytes,5,opt,name=board,proto3" json:"board,omitempty"`
	AbiList  []string             `protobuf:"bytes,6,rep,name=abiList,proto3" json:"abiList,omitempty"`
}

func (x *CPUData) Reset() {
	*x = CPUData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUData) ProtoMessage() {}

func (x *CPUData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUData.ProtoReflect.Descriptor instead.
func (*CPUData) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{7}
}

func (x *CPUData) GetArch() CPUData_Architecture {
	if x != nil {
		return x.Arch
	}
	return CPUData_UNKNOWN
}

func (x *CPUData) GetArchName() string {
	if x != nil {
		return x.ArchName
	}
	return ""
}

func (x *CPUData) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPUData) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *CPUData) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *CPUData) GetAbiList() []string {
	if x != nil {
		return x.AbiList
	}
	return nil
}

// Android device
type AndroidDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *AndroidDevice_ID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version  AndroidDevice_Version         `protobuf:"varint,2,opt,name=version,proto3,enum=device_utils.AndroidDevice_Version" json:"version,omitempty"`
	Build    *AndroidDevice_BuildData      `protobuf:"bytes,3,opt,name=build,proto3" json:"build,omitempty"`
	Software *AndroidDevice_DeviceSoftware `protobuf:"bytes,4,opt,name=software,proto3" json:"software,omitempty"`
	// Everything below this can technically be abstracted to unified device
	Screen     *ScreenData  `protobuf:"bytes,5,opt,name=screen,proto3" json:"screen,omitempty"`
	Cpu        *CPUData     `protobuf:"bytes,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Locale     *Locale      `protobuf:"bytes,7,opt,name=locale,proto3" json:"locale,omitempty"`
	Location   *GPSLocation `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Timezone   *Timezone    `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	MacAddress *MAC         `protobuf:"bytes,10,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	SimSlots   []*SIMCard   `protobuf:"bytes,11,rep,name=simSlots,proto3" json:"simSlots,omitempty"` // Dual SIM compatibility
}

func (x *AndroidDevice) Reset() {
	*x = AndroidDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDevice) ProtoMessage() {}

func (x *AndroidDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDevice.ProtoReflect.Descriptor instead.
func (*AndroidDevice) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{8}
}

func (x *AndroidDevice) GetId() *AndroidDevice_ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AndroidDevice) GetVersion() AndroidDevice_Version {
	if x != nil {
		return x.Version
	}
	return AndroidDevice_AndroidVersion_NONE
}

func (x *AndroidDevice) GetBuild() *AndroidDevice_BuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *AndroidDevice) GetSoftware() *AndroidDevice_DeviceSoftware {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *AndroidDevice) GetScreen() *ScreenData {
	if x != nil {
		return x.Screen
	}
	return nil
}

func (x *AndroidDevice) GetCpu() *CPUData {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *AndroidDevice) GetLocale() *Locale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *AndroidDevice) GetLocation() *GPSLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AndroidDevice) GetTimezone() *Timezone {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *AndroidDevice) GetMacAddress() *MAC {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *AndroidDevice) GetSimSlots() []*SIMCard {
	if x != nil {
		return x.SimSlots
	}
	return nil
}

type Browser_TLSFingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   Browser_TLSFingerprint_ProtocolVersion            `protobuf:"varint,1,opt,name=version,proto3,enum=device_utils.Browser_TLSFingerprint_ProtocolVersion" json:"version,omitempty"`
	CipherSuites              []Browser_TLSFingerprint_CipherSuite              `protobuf:"varint,2,rep,packed,name=cipherSuites,proto3,enum=device_utils.Browser_TLSFingerprint_CipherSuite" json:"cipherSuites,omitempty"`
	Extensions                []Browser_TLSFingerprint_Extensions               `protobuf:"varint,3,rep,packed,name=extensions,proto3,enum=device_utils.Browser_TLSFingerprint_Extensions" json:"extensions,omitempty"`
	EllipticCurves            []Browser_TLSFingerprint_EllipticCurve            `protobuf:"varint,4,rep,packed,name=ellipticCurves,proto3,enum=device_utils.Browser_TLSFingerprint_EllipticCurve" json:"ellipticCurves,omitempty"`
	EllipticCurvePointFormats []Browser_TLSFingerprint_EllipticCurvePointFormat `protobuf:"varint,5,rep,packed,name=ellipticCurvePointFormats,proto3,enum=device_utils.Browser_TLSFingerprint_EllipticCurvePointFormat" json:"ellipticCurvePointFormats,omitempty"`
}

func (x *Browser_TLSFingerprint) Reset() {
	*x = Browser_TLSFingerprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Browser_TLSFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Browser_TLSFingerprint) ProtoMessage() {}

func (x *Browser_TLSFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Browser_TLSFingerprint.ProtoReflect.Descriptor instead.
func (*Browser_TLSFingerprint) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Browser_TLSFingerprint) GetVersion() Browser_TLSFingerprint_ProtocolVersion {
	if x != nil {
		return x.Version
	}
	return Browser_TLSFingerprint_UNKNOWN
}

func (x *Browser_TLSFingerprint) GetCipherSuites() []Browser_TLSFingerprint_CipherSuite {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

func (x *Browser_TLSFingerprint) GetExtensions() []Browser_TLSFingerprint_Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Browser_TLSFingerprint) GetEllipticCurves() []Browser_TLSFingerprint_EllipticCurve {
	if x != nil {
		return x.EllipticCurves
	}
	return nil
}

func (x *Browser_TLSFingerprint) GetEllipticCurvePointFormats() []Browser_TLSFingerprint_EllipticCurvePointFormat {
	if x != nil {
		return x.EllipticCurvePointFormats
	}
	return nil
}

type SIMCard_IMEI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TAC string `protobuf:"bytes,1,opt,name=TAC,proto3" json:"TAC,omitempty"`
	// src: https://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity
	// AA	-	BB	BB	BB	-	CC	CC	CC	D
	// Where AA and BB = TAC, CC = serial (randomized) and D = Luhn validation
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
}

func (x *SIMCard_IMEI) Reset() {
	*x = SIMCard_IMEI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SIMCard_IMEI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIMCard_IMEI) ProtoMessage() {}

func (x *SIMCard_IMEI) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIMCard_IMEI.ProtoReflect.Descriptor instead.
func (*SIMCard_IMEI) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SIMCard_IMEI) GetTAC() string {
	if x != nil {
		return x.TAC
	}
	return ""
}

func (x *SIMCard_IMEI) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

type SIMCard_MEID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionCode       string `protobuf:"bytes,1,opt,name=RegionCode,proto3" json:"RegionCode,omitempty"`
	ManufacturerCode string `protobuf:"bytes,2,opt,name=ManufacturerCode,proto3" json:"ManufacturerCode,omitempty"`
	// src: https://en.wikipedia.org/wiki/Mobile_equipment_identifier
	// R R	X	X	X	X	X	X	Z	Z	Z	Z	Z	Z	C
	// Where R = region, X = manufacturer, Z = serial (randomized) and C = Luhn validation
	Meid string `protobuf:"bytes,3,opt,name=meid,proto3" json:"meid,omitempty"`
}

func (x *SIMCard_MEID) Reset() {
	*x = SIMCard_MEID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SIMCard_MEID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIMCard_MEID) ProtoMessage() {}

func (x *SIMCard_MEID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIMCard_MEID.ProtoReflect.Descriptor instead.
func (*SIMCard_MEID) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{3, 1}
}

func (x *SIMCard_MEID) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *SIMCard_MEID) GetManufacturerCode() string {
	if x != nil {
		return x.ManufacturerCode
	}
	return ""
}

func (x *SIMCard_MEID) GetMeid() string {
	if x != nil {
		return x.Meid
	}
	return ""
}

type AndroidDevice_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AndroidDevice_ID) Reset() {
	*x = AndroidDevice_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDevice_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDevice_ID) ProtoMessage() {}

func (x *AndroidDevice_ID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDevice_ID.ProtoReflect.Descriptor instead.
func (*AndroidDevice_ID) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AndroidDevice_ID) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// https://developer.android.com/reference/android/os/Build
type AndroidDevice_BuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Board              string `protobuf:"bytes,1,opt,name=board,proto3" json:"board,omitempty"`
	Bootloader         string `protobuf:"bytes,2,opt,name=bootloader,proto3" json:"bootloader,omitempty"`
	Brand              string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	Device             string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	Display            string `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	Fingerprint        string `protobuf:"bytes,6,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Hardware           string `protobuf:"bytes,7,opt,name=hardware,proto3" json:"hardware,omitempty"`
	Id                 string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Manufacturer       string `protobuf:"bytes,9,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model              string `protobuf:"bytes,10,opt,name=model,proto3" json:"model,omitempty"`
	OdmSku             string `protobuf:"bytes,11,opt,name=odmSku,proto3" json:"odmSku,omitempty"`
	Product            string `protobuf:"bytes,12,opt,name=product,proto3" json:"product,omitempty"`
	Sku                string `protobuf:"bytes,13,opt,name=sku,proto3" json:"sku,omitempty"`
	SocManufacturer    string `protobuf:"bytes,14,opt,name=socManufacturer,proto3" json:"socManufacturer,omitempty"`
	SocModel           string `protobuf:"bytes,15,opt,name=socModel,proto3" json:"socModel,omitempty"`
	Tags               string `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	Type               string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
	IncrementalVersion string `protobuf:"bytes,18,opt,name=incrementalVersion,proto3" json:"incrementalVersion,omitempty"`
}

func (x *AndroidDevice_BuildData) Reset() {
	*x = AndroidDevice_BuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDevice_BuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDevice_BuildData) ProtoMessage() {}

func (x *AndroidDevice_BuildData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDevice_BuildData.ProtoReflect.Descriptor instead.
func (*AndroidDevice_BuildData) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{8, 1}
}

func (x *AndroidDevice_BuildData) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetBootloader() string {
	if x != nil {
		return x.Bootloader
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetHardware() string {
	if x != nil {
		return x.Hardware
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetOdmSku() string {
	if x != nil {
		return x.OdmSku
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetSocManufacturer() string {
	if x != nil {
		return x.SocManufacturer
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetSocModel() string {
	if x != nil {
		return x.SocModel
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AndroidDevice_BuildData) GetIncrementalVersion() string {
	if x != nil {
		return x.IncrementalVersion
	}
	return ""
}

type AndroidDevice_DeviceSoftware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareMetaData map[string]string `protobuf:"bytes,1,rep,name=softwareMetaData,proto3" json:"softwareMetaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// app package : version string
	AppMetaData map[string]string `protobuf:"bytes,2,rep,name=appMetaData,proto3" json:"appMetaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AndroidDevice_DeviceSoftware) Reset() {
	*x = AndroidDevice_DeviceSoftware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_utils_device_utils_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidDevice_DeviceSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDevice_DeviceSoftware) ProtoMessage() {}

func (x *AndroidDevice_DeviceSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_utils_device_utils_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDevice_DeviceSoftware.ProtoReflect.Descriptor instead.
func (*AndroidDevice_DeviceSoftware) Descriptor() ([]byte, []int) {
	return file_proto_device_utils_device_utils_proto_rawDescGZIP(), []int{8, 2}
}

func (x *AndroidDevice_DeviceSoftware) GetSoftwareMetaData() map[string]string {
	if x != nil {
		return x.SoftwareMetaData
	}
	return nil
}

func (x *AndroidDevice_DeviceSoftware) GetAppMetaData() map[string]string {
	if x != nil {
		return x.AppMetaData
	}
	return nil
}

var File_proto_device_utils_device_utils_proto protoreflect.FileDescriptor

var file_proto_device_utils_device_utils_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x22, 0xf9, 0x89, 0x01, 0x0a, 0x07, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0e,
	0x74, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x1a, 0xb0,
	0x88, 0x01, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x53, 0x46, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x65, 0x6c, 0x6c,
	0x69, 0x70, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69, 0x63,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x0e, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69, 0x63, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x19, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69,
	0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x53, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x45,
	0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x19, 0x65, 0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69,
	0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x53, 0x4c, 0x33, 0x10, 0x80, 0x06, 0x12, 0x09,
	0x0a, 0x04, 0x54, 0x4c, 0x53, 0x31, 0x10, 0x81, 0x06, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x4c, 0x53,
	0x31, 0x5f, 0x31, 0x10, 0x82, 0x06, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x4c, 0x53, 0x31, 0x5f, 0x32,
	0x10, 0x83, 0x06, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x4c, 0x53, 0x31, 0x5f, 0x33, 0x10, 0x84, 0x06,
	0x12, 0x0b, 0x0a, 0x05, 0x44, 0x54, 0x4c, 0x53, 0x31, 0x10, 0xff, 0xfd, 0x03, 0x12, 0x0d, 0x0a,
	0x07, 0x44, 0x54, 0x4c, 0x53, 0x31, 0x5f, 0x32, 0x10, 0xfd, 0xfd, 0x03, 0x12, 0x0e, 0x0a, 0x09,
	0x44, 0x54, 0x4c, 0x53, 0x31, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x80, 0x02, 0x22, 0xac, 0x71, 0x0a,
	0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x4c, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4c, 0x53,
	0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4d,
	0x44, 0x35, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x34, 0x30, 0x5f, 0x4d, 0x44,
	0x35, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x4d, 0x44, 0x35, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x32, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x34,
	0x30, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x41, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45,
	0x53, 0x34, 0x30, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x08, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45,
	0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53,
	0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0a, 0x12, 0x28,
	0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x34, 0x30, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45,
	0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0d, 0x12,
	0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x45, 0x58,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x34, 0x30, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44,
	0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x10,
	0x12, 0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x34,
	0x30, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x54,
	0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x44, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x12, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x44, 0x45, 0x53, 0x34, 0x30, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x14, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x15, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x34, 0x30, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x17,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x4d, 0x44, 0x35,
	0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f,
	0x6e, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45,
	0x53, 0x34, 0x30, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x19, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x1a, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52,
	0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42,
	0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53,
	0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31,
	0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4c, 0x53, 0x5f,
	0x4b, 0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x41, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f,
	0x4b, 0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x4b,
	0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44,
	0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4c,
	0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x41,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x25, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x34, 0x30, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x26, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x32, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x34, 0x30, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x27, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x34, 0x30, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x28, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x45, 0x58,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x53, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x34, 0x30, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x29, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x52, 0x43, 0x32, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x34, 0x30, 0x5f, 0x4d, 0x44,
	0x35, 0x10, 0x2a, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x4b, 0x52, 0x42, 0x35, 0x5f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f,
	0x34, 0x30, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50,
	0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x2d, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x30, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x31, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x33, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x34, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x35, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0x36, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48,
	0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x37, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x38, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x39, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44,
	0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x3a, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x3b, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x3c,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0x3d, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f,
	0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x3e, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0x3f, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45,
	0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x40, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x41, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f,
	0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x42, 0x12,
	0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x43, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x45, 0x12,
	0x29, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x46, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0x67, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x68, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0x69, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44,
	0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x6a, 0x12, 0x27, 0x0a, 0x23,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0x6b, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f,
	0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x6c, 0x12, 0x27,
	0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x6d, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x84, 0x01, 0x12,
	0x29, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x85, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x86, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45,
	0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c,
	0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x87,
	0x01, 0x12, 0x2a, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32,
	0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x88, 0x01, 0x12, 0x2a, 0x0a,
	0x25, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x89, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x4c, 0x53,
	0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8a, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44,
	0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8b, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8c, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x8d, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x8e, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45,
	0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45,
	0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8f, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x90, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x91, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54,
	0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x92, 0x01, 0x12, 0x26,
	0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x93, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x94, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x95, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x10, 0x96, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44,
	0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0x97, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44,
	0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x98, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53,
	0x45, 0x45, 0x44, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x99, 0x01, 0x12, 0x22,
	0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x9a, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f,
	0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x9b, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x9c, 0x01, 0x12, 0x24, 0x0a, 0x1f,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10,
	0x9d, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x9e, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x10, 0x9f, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48,
	0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa0, 0x01, 0x12,
	0x27, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa1, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0xa2, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa3, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0xa4, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f,
	0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa5, 0x01, 0x12, 0x28,
	0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa6, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10,
	0xa7, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa8, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa9, 0x01, 0x12, 0x28,
	0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xaa, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10,
	0xab, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xac, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x10, 0xad, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xae, 0x01, 0x12, 0x24, 0x0a, 0x1f,
	0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10,
	0xaf, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb0,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb1, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb2, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38,
	0x34, 0x10, 0xb3, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xb4, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44,
	0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb5, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0xb6, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb7, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb8,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38,
	0x34, 0x10, 0xb9, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xba, 0x01, 0x12,
	0x2c, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbb, 0x01, 0x12, 0x2c, 0x0a,
	0x27, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbc, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x54,
	0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbd, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbe, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbf, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xc0, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53,
	0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc1,
	0x01, 0x12, 0x2c, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc2, 0x01, 0x12,
	0x2d, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc3, 0x01, 0x12, 0x2d,
	0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc4, 0x01, 0x12, 0x2d, 0x0a,
	0x28, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc5, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x54, 0x4c, 0x53, 0x5f, 0x53, 0x4d, 0x34, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x4d, 0x33, 0x10,
	0xc6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x4d, 0x34, 0x5f, 0x43, 0x43,
	0x4d, 0x5f, 0x53, 0x4d, 0x33, 0x10, 0xc7, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x43, 0x53, 0x56, 0x10, 0xff, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x8a, 0x14, 0x12,
	0x0f, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x80, 0x26,
	0x12, 0x1b, 0x0a, 0x16, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x81, 0x26, 0x12, 0x1b, 0x0a,
	0x16, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x82, 0x26, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x4c,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31,
	0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x83, 0x26, 0x12, 0x1b, 0x0a,
	0x16, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x84, 0x26, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x4c,
	0x53, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x85, 0x26, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x4c, 0x53,
	0x5f, 0x41, 0x45, 0x47, 0x49, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38,
	0x34, 0x10, 0x86, 0x26, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x5f, 0x41, 0x45, 0x47, 0x49,
	0x53, 0x5f, 0x31, 0x32, 0x38, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x87, 0x26,
	0x12, 0x17, 0x0a, 0x11, 0x54, 0x4c, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x43, 0x53, 0x56, 0x10, 0x80, 0xac, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x81, 0x80, 0x03, 0x12, 0x25, 0x0a,
	0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x82, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53,
	0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x83, 0x80, 0x03,
	0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x84, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x85, 0x80, 0x03, 0x12, 0x23, 0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x86, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x87, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45,
	0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53,
	0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x88, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x89, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0x8a, 0x80, 0x03, 0x12, 0x20, 0x0a, 0x1a, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8b, 0x80, 0x03, 0x12, 0x23, 0x0a, 0x1d, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8c, 0x80, 0x03, 0x12,
	0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8d, 0x80, 0x03, 0x12, 0x27, 0x0a, 0x21, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8e,
	0x80, 0x03, 0x12, 0x27, 0x0a, 0x21, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x8f, 0x80, 0x03, 0x12, 0x21, 0x0a, 0x1b, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x90, 0x80, 0x03, 0x12, 0x24,
	0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x91, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f,
	0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x92, 0x80, 0x03, 0x12,
	0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x93, 0x80, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10,
	0x94, 0x80, 0x03, 0x12, 0x21, 0x0a, 0x1b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f,
	0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x95, 0x80, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x96, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x97, 0x80, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x43, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x98, 0x80,
	0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x61, 0x6e,
	0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x99, 0x80, 0x03, 0x12, 0x27, 0x0a, 0x21, 0x54,
	0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x9a, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45,
	0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x9b, 0x80,
	0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45,
	0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x9c, 0x80, 0x03, 0x12, 0x26,
	0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0x9d, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52,
	0x50, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x9e,
	0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x9f, 0x80, 0x03, 0x12, 0x26,
	0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x10, 0xa0, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52,
	0x50, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0xa1,
	0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x52, 0x50, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32,
	0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0xa2, 0x80, 0x03, 0x12, 0x2d,
	0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43,
	0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa3, 0x80, 0x03, 0x12, 0x2d, 0x0a,
	0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa4, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa5, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xa6, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0xa7, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44,
	0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xa8,
	0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa9, 0x80, 0x03, 0x12, 0x2a,
	0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xaa, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xab, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xac, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0xad, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xae, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31,
	0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xaf, 0x80,
	0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb0, 0x80, 0x03, 0x12, 0x2a,
	0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb1, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33,
	0x38, 0x34, 0x10, 0xb2, 0x80, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x52, 0x43, 0x34,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x10, 0xb3, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x33, 0x44, 0x45, 0x53, 0x5f, 0x45, 0x44, 0x45, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0xb4, 0x80, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0xb5, 0x80,
	0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50,
	0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0xb6, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xb7, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38,
	0x34, 0x10, 0xb8, 0x80, 0x03, 0x12, 0x21, 0x0a, 0x1b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44,
	0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x53, 0x48, 0x41, 0x10, 0xb9, 0x80, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xba, 0x80, 0x03, 0x12, 0x24,
	0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xbb, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbc, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xbd, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44,
	0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xbe, 0x80, 0x03, 0x12,
	0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xbf, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52,
	0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0xc0, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xc1, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc2, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xc3, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xc4, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xc5, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xc6, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xc7, 0x80, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xc8, 0x80, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xc9, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0xca, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33,
	0x38, 0x34, 0x10, 0xcb, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xcc, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xcd,
	0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xce, 0x80, 0x03, 0x12,
	0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xcf, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xd0, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xd1, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xd2, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xd3, 0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xd4, 0x80, 0x03, 0x12,
	0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xd5, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x35, 0x36, 0x10, 0xd6, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48,
	0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xd7,
	0x80, 0x03, 0x12, 0x29, 0x0a, 0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xd8, 0x80, 0x03, 0x12, 0x29, 0x0a,
	0x23, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xd9, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xda, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x61,
	0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xdb, 0x80, 0x03,
	0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xdc, 0x80, 0x03,
	0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xdd, 0x80, 0x03,
	0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xde, 0x80, 0x03, 0x12,
	0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xdf, 0x80, 0x03, 0x12, 0x2c,
	0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xe0, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xe1, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0xe2, 0x80, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45,
	0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xe3, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xe4, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20,
	0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xe5, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xe6, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xe7, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xe8, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xe9, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xea, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x20,
	0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xeb, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xec, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xed, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0xee, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xef, 0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f,
	0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xf0,
	0x80, 0x03, 0x12, 0x2c, 0x0a, 0x26, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xf1, 0x80, 0x03,
	0x12, 0x32, 0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xf2, 0x80, 0x03, 0x12, 0x32, 0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xf3, 0x80, 0x03, 0x12, 0x31, 0x0a, 0x2b, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xf4, 0x80, 0x03, 0x12, 0x31, 0x0a, 0x2b, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xf5, 0x80, 0x03, 0x12, 0x30,
	0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xf6, 0x80, 0x03,
	0x12, 0x30, 0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xf7,
	0x80, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0xf8, 0x80, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0xf9, 0x80, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xfa, 0x80, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xfb, 0x80, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xfc, 0x80, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xfd, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xfe, 0x80, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54,
	0x4c, 0x53, 0x5f, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xff, 0x80, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x80, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x81, 0x81, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c,
	0x53, 0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x82, 0x81, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53,
	0x5f, 0x44, 0x48, 0x5f, 0x44, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0x83, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0x84, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0x85, 0x81, 0x03, 0x12, 0x32, 0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x86, 0x81, 0x03, 0x12, 0x32, 0x0a, 0x2c,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x87, 0x81, 0x03,
	0x12, 0x31, 0x0a, 0x2b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0x88, 0x81, 0x03, 0x12, 0x31, 0x0a, 0x2b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c,
	0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33,
	0x38, 0x34, 0x10, 0x89, 0x81, 0x03, 0x12, 0x30, 0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0x8a, 0x81, 0x03, 0x12, 0x30, 0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x8b, 0x81, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x8c, 0x81, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x8d, 0x81, 0x03, 0x12, 0x2a, 0x0a, 0x24,
	0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d,
	0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0x8e, 0x81, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0x8f, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0x90, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0x91, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0x92, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34,
	0x10, 0x93, 0x81, 0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x94, 0x81, 0x03,
	0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x95, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x96, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x97, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x98, 0x81, 0x03, 0x12, 0x2e, 0x0a, 0x28,
	0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x99, 0x81, 0x03, 0x12, 0x30, 0x0a, 0x2a,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x9a, 0x81, 0x03, 0x12, 0x30,
	0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x4c, 0x4c, 0x49, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x9b, 0x81, 0x03,
	0x12, 0x1e, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0x9c, 0x81, 0x03,
	0x12, 0x1e, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0x9d, 0x81, 0x03,
	0x12, 0x22, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d,
	0x10, 0x9e, 0x81, 0x03, 0x12, 0x22, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x43, 0x43, 0x4d, 0x10, 0x9f, 0x81, 0x03, 0x12, 0x20, 0x0a, 0x1a, 0x54, 0x4c, 0x53, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xa0, 0x81, 0x03, 0x12, 0x20, 0x0a, 0x1a, 0x54, 0x4c,
	0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32,
	0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xa1, 0x81, 0x03, 0x12, 0x24, 0x0a, 0x1e,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xa2,
	0x81, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43,
	0x43, 0x4d, 0x5f, 0x38, 0x10, 0xa3, 0x81, 0x03, 0x12, 0x1e, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x43, 0x4d, 0x10, 0xa4, 0x81, 0x03, 0x12, 0x1e, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x43, 0x43, 0x4d, 0x10, 0xa5, 0x81, 0x03, 0x12, 0x22, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0xa6, 0x81, 0x03, 0x12, 0x22, 0x0a, 0x1c,
	0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0xa7, 0x81, 0x03,
	0x12, 0x20, 0x0a, 0x1a, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xa8,
	0x81, 0x03, 0x12, 0x20, 0x0a, 0x1a, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38,
	0x10, 0xa9, 0x81, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x44, 0x48, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xaa, 0x81, 0x03, 0x12, 0x24, 0x0a, 0x1e, 0x54, 0x4c,
	0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xab, 0x81, 0x03,
	0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x43, 0x4d, 0x10, 0xac, 0x81, 0x03, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0xad, 0x81, 0x03,
	0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38, 0x10, 0xae, 0x81, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x38,
	0x10, 0xaf, 0x81, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x43, 0x50,
	0x57, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb0, 0x81, 0x03, 0x12, 0x28,
	0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x43, 0x50, 0x57, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x10, 0xb1, 0x81, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x43, 0x43, 0x50, 0x57, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xb2,
	0x81, 0x03, 0x12, 0x28, 0x0a, 0x22, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x43, 0x50, 0x57, 0x44,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x43,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb3, 0x81, 0x03, 0x12, 0x17, 0x0a, 0x11,
	0x54, 0x4c, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0xb4, 0x81, 0x03, 0x12, 0x17, 0x0a, 0x11, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0xb5, 0x81, 0x03, 0x12, 0x32,
	0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31, 0x31, 0x31,
	0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4b, 0x55, 0x5a, 0x4e, 0x59,
	0x45, 0x43, 0x48, 0x49, 0x4b, 0x5f, 0x43, 0x54, 0x52, 0x5f, 0x4f, 0x4d, 0x41, 0x43, 0x10, 0x80,
	0x82, 0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33,
	0x34, 0x31, 0x31, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d,
	0x41, 0x47, 0x4d, 0x41, 0x5f, 0x43, 0x54, 0x52, 0x5f, 0x4f, 0x4d, 0x41, 0x43, 0x10, 0x81, 0x82,
	0x03, 0x12, 0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34,
	0x31, 0x31, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x32, 0x38,
	0x31, 0x34, 0x37, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x82, 0x82, 0x03,
	0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31,
	0x31, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4b, 0x55, 0x5a,
	0x4e, 0x59, 0x45, 0x43, 0x48, 0x49, 0x4b, 0x5f, 0x4d, 0x47, 0x4d, 0x5f, 0x4c, 0x10, 0x83, 0x82,
	0x03, 0x12, 0x2a, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34,
	0x31, 0x31, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41,
	0x47, 0x4d, 0x41, 0x5f, 0x4d, 0x47, 0x4d, 0x5f, 0x4c, 0x10, 0x84, 0x82, 0x03, 0x12, 0x2f, 0x0a,
	0x29, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31, 0x31, 0x31, 0x32,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4b, 0x55, 0x5a, 0x4e, 0x59, 0x45,
	0x43, 0x48, 0x49, 0x4b, 0x5f, 0x4d, 0x47, 0x4d, 0x5f, 0x53, 0x10, 0x85, 0x82, 0x03, 0x12, 0x2a,
	0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x47, 0x4f, 0x53, 0x54, 0x52, 0x33, 0x34, 0x31, 0x31, 0x31,
	0x32, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x47, 0x4d, 0x41,
	0x5f, 0x4d, 0x47, 0x4d, 0x5f, 0x53, 0x10, 0x86, 0x82, 0x03, 0x12, 0x31, 0x0a, 0x2b, 0x54, 0x4c,
	0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33,
	0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa8, 0x99, 0x03, 0x12, 0x33, 0x0a,
	0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50,
	0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xa9,
	0x99, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f,
	0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0xaa, 0x99, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50, 0x4f, 0x4c,
	0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0xab, 0x99, 0x03,
	0x12, 0x31, 0x0a, 0x2b, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f,
	0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0xac, 0x99, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x44, 0x48, 0x45, 0x5f, 0x50,
	0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30,
	0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0xad, 0x99, 0x03, 0x12, 0x2f, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32,
	0x30, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0xae, 0x99, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44,
	0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f,
	0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x81,
	0xa0, 0x03, 0x12, 0x2b, 0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f,
	0x50, 0x53, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x82, 0xa0, 0x03, 0x12,
	0x2d, 0x0a, 0x27, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43,
	0x4d, 0x5f, 0x38, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x83, 0xa0, 0x03, 0x12, 0x2b,
	0x0a, 0x25, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x50, 0x53, 0x4b, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x85, 0xa0, 0x03, 0x22, 0xec, 0x0a, 0x0a, 0x0a,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5a, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x52, 0x50, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x10,
	0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x50, 0x10, 0x0e, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x2a,
	0x0a, 0x26, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x47,
	0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x32, 0x10,
	0x11, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x14, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x16,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x19,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x5f, 0x4c, 0x54, 0x53, 0x10, 0x1a, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x1c, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x57, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x1d, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x57, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x1e, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x41, 0x4c, 0x54, 0x10,
	0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x50, 0x53,
	0x4b, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x22, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x23, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4c, 0x4d, 0x53, 0x50, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x4c, 0x4d, 0x53, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x25,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4c, 0x4d, 0x53, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x10, 0x26, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x45, 0x4b, 0x54, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x53, 0x10, 0x27, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x29, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x53, 0x4b, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x53, 0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x2f,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53, 0x10,
	0x30, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48,
	0x41, 0x4b, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x31, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x53, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x34, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x35, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x36,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x37, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x38, 0x12,
	0x1d, 0x0a, 0x19, 0x51, 0x55, 0x49, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x39, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x3a, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x4e, 0x53, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x10, 0x3b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x10, 0x3c, 0x12,
	0x25, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0xe9, 0x88, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x81, 0xfe, 0x03, 0x22, 0xb7, 0x06, 0x0a, 0x0d, 0x45,
	0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69, 0x63, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45,
	0x43, 0x54, 0x31, 0x36, 0x33, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43,
	0x54, 0x31, 0x36, 0x33, 0x52, 0x31, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54,
	0x31, 0x36, 0x33, 0x52, 0x32, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x31,
	0x39, 0x33, 0x52, 0x31, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x31, 0x39,
	0x33, 0x52, 0x32, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x32, 0x33, 0x33,
	0x4b, 0x31, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x32, 0x33, 0x33, 0x52,
	0x31, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x32, 0x33, 0x39, 0x4b, 0x31,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x32, 0x38, 0x33, 0x4b, 0x31, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x32, 0x38, 0x33, 0x52, 0x31, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x34, 0x30, 0x39, 0x4b, 0x31, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x34, 0x30, 0x39, 0x52, 0x31, 0x10, 0x0c, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x45, 0x43, 0x54, 0x35, 0x37, 0x31, 0x4b, 0x31, 0x10, 0x0d, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x43, 0x54, 0x35, 0x37, 0x31, 0x52, 0x31, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x45, 0x43, 0x50, 0x31, 0x36, 0x30, 0x4b, 0x31, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x45, 0x43, 0x50, 0x31, 0x36, 0x30, 0x52, 0x31, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45,
	0x43, 0x50, 0x31, 0x36, 0x30, 0x52, 0x32, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43,
	0x50, 0x31, 0x39, 0x32, 0x4b, 0x31, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50,
	0x31, 0x39, 0x32, 0x52, 0x31, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x32,
	0x32, 0x34, 0x4b, 0x31, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x32, 0x32,
	0x34, 0x52, 0x31, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36,
	0x4b, 0x31, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x52,
	0x31, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x52, 0x31,
	0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x50, 0x35, 0x32, 0x31, 0x52, 0x31, 0x10,
	0x19, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x50, 0x4f, 0x4f, 0x4c, 0x50, 0x32,
	0x35, 0x36, 0x52, 0x31, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x50,
	0x4f, 0x4f, 0x4c, 0x50, 0x33, 0x38, 0x34, 0x52, 0x31, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x52, 0x41, 0x49, 0x4e, 0x50, 0x4f, 0x4f, 0x4c, 0x50, 0x35, 0x31, 0x32, 0x52, 0x31, 0x10, 0x1c,
	0x12, 0x0a, 0x0a, 0x06, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x1d, 0x12, 0x08, 0x0a, 0x04,
	0x58, 0x34, 0x34, 0x38, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x50,
	0x4f, 0x4f, 0x4c, 0x50, 0x32, 0x35, 0x36, 0x52, 0x31, 0x54, 0x4c, 0x53, 0x31, 0x33, 0x10, 0x1f,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x52, 0x41, 0x49, 0x4e, 0x50, 0x4f, 0x4f, 0x4c, 0x50, 0x33, 0x38,
	0x34, 0x52, 0x31, 0x54, 0x4c, 0x53, 0x31, 0x33, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x52,
	0x41, 0x49, 0x4e, 0x50, 0x4f, 0x4f, 0x4c, 0x50, 0x35, 0x31, 0x32, 0x52, 0x31, 0x54, 0x4c, 0x53,
	0x31, 0x33, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x32, 0x35, 0x36, 0x41, 0x10, 0x22,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x32, 0x35, 0x36, 0x42, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x43, 0x32, 0x35, 0x36, 0x43, 0x10, 0x24, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x32, 0x35,
	0x36, 0x44, 0x10, 0x25, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x35, 0x31, 0x32, 0x41, 0x10, 0x26,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x43, 0x35, 0x31, 0x32, 0x42, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x43, 0x35, 0x31, 0x32, 0x43, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x53, 0x4d, 0x32, 0x10, 0x29, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x46, 0x44, 0x48, 0x45, 0x32,
	0x30, 0x34, 0x38, 0x10, 0x80, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x46, 0x44, 0x48, 0x45, 0x33,
	0x30, 0x37, 0x32, 0x10, 0x81, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x46, 0x44, 0x48, 0x45, 0x34,
	0x30, 0x39, 0x36, 0x10, 0x82, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x46, 0x44, 0x48, 0x45, 0x36,
	0x31, 0x34, 0x34, 0x10, 0x83, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x46, 0x44, 0x48, 0x45, 0x38,
	0x31, 0x39, 0x32, 0x10, 0x84, 0x02, 0x12, 0x25, 0x0a, 0x1f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52,
	0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x4d, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x53, 0x10, 0x81, 0xfe, 0x03, 0x12, 0x25, 0x0a,
	0x1f, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x32, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x53,
	0x10, 0x82, 0xfe, 0x03, 0x22, 0x6c, 0x0a, 0x18, 0x45, 0x6c, 0x6c, 0x69, 0x70, 0x74, 0x69, 0x63,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4e, 0x53, 0x49, 0x5f, 0x58, 0x39, 0x36, 0x32, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4e, 0x53, 0x49, 0x5f, 0x58, 0x39, 0x36, 0x32, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x32,
	0x10, 0x02, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x50, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x22, 0x44, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x53, 0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x53, 0x4f, 0x22, 0xa1, 0x03, 0x0a, 0x07, 0x53, 0x49, 0x4d,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x43, 0x43, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x43, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x4e, 0x43, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x4e, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x53, 0x4f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x53, 0x4f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x4d, 0x45, 0x49,
	0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x45, 0x49, 0x44,
	0x52, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x1a, 0x2c, 0x0a, 0x04, 0x49, 0x4d, 0x45, 0x49, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x41, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x41, 0x43,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x1a, 0x66, 0x0a, 0x04, 0x4d, 0x45, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x03,
	0x4d, 0x41, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x55, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4f, 0x55, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x1e, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xa6, 0x02, 0x0a,
	0x07, 0x43, 0x50, 0x55, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x50, 0x55, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x62, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x50,
	0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x50, 0x53, 0x45, 0x4c, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x50, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x50, 0x43, 0x36,
	0x34, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x33, 0x32, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03,
	0x58, 0x36, 0x34, 0x10, 0x08, 0x22, 0xd7, 0x0e, 0x0a, 0x0d, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x27, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x50, 0x55, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2c, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x4d, 0x41, 0x43, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x69, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2e, 0x53, 0x49, 0x4d, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x73, 0x69, 0x6d,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xf3, 0x03, 0x0a, 0x09,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x64, 0x6d, 0x53, 0x6b, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x64, 0x6d, 0x53, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x63, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xe2, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x03, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56,
	0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x31, 0x5f, 0x31, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x56, 0x31, 0x5f, 0x35, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x31, 0x5f,
	0x36, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x56,
	0x32, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x32, 0x5f, 0x31, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x32, 0x5f, 0x32, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x56,
	0x32, 0x5f, 0x33, 0x5f, 0x32, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x32, 0x5f, 0x33, 0x5f,
	0x37, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x33, 0x5f, 0x30, 0x10, 0x0b, 0x12, 0x08, 0x0a,
	0x04, 0x76, 0x33, 0x5f, 0x31, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x33, 0x5f, 0x32, 0x10,
	0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x34, 0x5f, 0x30, 0x5f, 0x32, 0x10, 0x0e, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x34, 0x5f, 0x30, 0x5f, 0x34, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x34, 0x5f,
	0x31, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x34, 0x5f, 0x32, 0x10, 0x11, 0x12, 0x08, 0x0a,
	0x04, 0x56, 0x34, 0x5f, 0x33, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x34, 0x5f, 0x34, 0x10,
	0x13, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x34, 0x5f, 0x34, 0x57, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x35, 0x5f, 0x30, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x35, 0x5f, 0x31, 0x10, 0x16,
	0x12, 0x08, 0x0a, 0x04, 0x56, 0x36, 0x5f, 0x30, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x37,
	0x5f, 0x30, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x37, 0x5f, 0x31, 0x10, 0x19, 0x12, 0x08,
	0x0a, 0x04, 0x56, 0x38, 0x5f, 0x30, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x38, 0x5f, 0x31,
	0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x39, 0x5f, 0x30, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x31, 0x30, 0x5f, 0x30, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x31, 0x31, 0x5f, 0x30,
	0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x31, 0x32, 0x5f, 0x30, 0x10, 0x1f, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x31, 0x32, 0x5f, 0x30, 0x4c, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x31, 0x33,
	0x5f, 0x30, 0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x31, 0x34, 0x5f, 0x30, 0x10, 0x22, 0x42,
	0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x52,
	0x55, 0x48, 0x49, 0x74, 0x73, 0x41, 0x42, 0x75, 0x6e, 0x6e, 0x79, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_device_utils_device_utils_proto_rawDescOnce sync.Once
	file_proto_device_utils_device_utils_proto_rawDescData = file_proto_device_utils_device_utils_proto_rawDesc
)

func file_proto_device_utils_device_utils_proto_rawDescGZIP() []byte {
	file_proto_device_utils_device_utils_proto_rawDescOnce.Do(func() {
		file_proto_device_utils_device_utils_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_device_utils_device_utils_proto_rawDescData)
	})
	return file_proto_device_utils_device_utils_proto_rawDescData
}

var file_proto_device_utils_device_utils_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_proto_device_utils_device_utils_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_device_utils_device_utils_proto_goTypes = []interface{}{
	(Browser_TLSFingerprint_ProtocolVersion)(0),          // 0: device_utils.Browser.TLSFingerprint.ProtocolVersion
	(Browser_TLSFingerprint_CipherSuite)(0),              // 1: device_utils.Browser.TLSFingerprint.CipherSuite
	(Browser_TLSFingerprint_Extensions)(0),               // 2: device_utils.Browser.TLSFingerprint.Extensions
	(Browser_TLSFingerprint_EllipticCurve)(0),            // 3: device_utils.Browser.TLSFingerprint.EllipticCurve
	(Browser_TLSFingerprint_EllipticCurvePointFormat)(0), // 4: device_utils.Browser.TLSFingerprint.EllipticCurvePointFormat
	(GPSLocation_LocationProvider)(0),                    // 5: device_utils.GPSLocation.LocationProvider
	(CPUData_Architecture)(0),                            // 6: device_utils.CPUData.Architecture
	(AndroidDevice_Version)(0),                           // 7: device_utils.AndroidDevice.Version
	(*Browser)(nil),                                      // 8: device_utils.Browser
	(*GPSLocation)(nil),                                  // 9: device_utils.GPSLocation
	(*Locale)(nil),                                       // 10: device_utils.Locale
	(*SIMCard)(nil),                                      // 11: device_utils.SIMCard
	(*MAC)(nil),                                          // 12: device_utils.MAC
	(*Timezone)(nil),                                     // 13: device_utils.Timezone
	(*ScreenData)(nil),                                   // 14: device_utils.ScreenData
	(*CPUData)(nil),                                      // 15: device_utils.CPUData
	(*AndroidDevice)(nil),                                // 16: device_utils.AndroidDevice
	(*Browser_TLSFingerprint)(nil),                       // 17: device_utils.Browser.TLSFingerprint
	(*SIMCard_IMEI)(nil),                                 // 18: device_utils.SIMCard.IMEI
	(*SIMCard_MEID)(nil),                                 // 19: device_utils.SIMCard.MEID
	(*AndroidDevice_ID)(nil),                             // 20: device_utils.AndroidDevice.ID
	(*AndroidDevice_BuildData)(nil),                      // 21: device_utils.AndroidDevice.BuildData
	(*AndroidDevice_DeviceSoftware)(nil),                 // 22: device_utils.AndroidDevice.DeviceSoftware
	nil,                                                  // 23: device_utils.AndroidDevice.DeviceSoftware.SoftwareMetaDataEntry
	nil,                                                  // 24: device_utils.AndroidDevice.DeviceSoftware.AppMetaDataEntry
}
var file_proto_device_utils_device_utils_proto_depIdxs = []int32{
	17, // 0: device_utils.Browser.tlsFingerprint:type_name -> device_utils.Browser.TLSFingerprint
	5,  // 1: device_utils.GPSLocation.provider:type_name -> device_utils.GPSLocation.LocationProvider
	18, // 2: device_utils.SIMCard.imei:type_name -> device_utils.SIMCard.IMEI
	19, // 3: device_utils.SIMCard.meid:type_name -> device_utils.SIMCard.MEID
	6,  // 4: device_utils.CPUData.arch:type_name -> device_utils.CPUData.Architecture
	20, // 5: device_utils.AndroidDevice.id:type_name -> device_utils.AndroidDevice.ID
	7,  // 6: device_utils.AndroidDevice.version:type_name -> device_utils.AndroidDevice.Version
	21, // 7: device_utils.AndroidDevice.build:type_name -> device_utils.AndroidDevice.BuildData
	22, // 8: device_utils.AndroidDevice.software:type_name -> device_utils.AndroidDevice.DeviceSoftware
	14, // 9: device_utils.AndroidDevice.screen:type_name -> device_utils.ScreenData
	15, // 10: device_utils.AndroidDevice.cpu:type_name -> device_utils.CPUData
	10, // 11: device_utils.AndroidDevice.locale:type_name -> device_utils.Locale
	9,  // 12: device_utils.AndroidDevice.location:type_name -> device_utils.GPSLocation
	13, // 13: device_utils.AndroidDevice.timezone:type_name -> device_utils.Timezone
	12, // 14: device_utils.AndroidDevice.macAddress:type_name -> device_utils.MAC
	11, // 15: device_utils.AndroidDevice.simSlots:type_name -> device_utils.SIMCard
	0,  // 16: device_utils.Browser.TLSFingerprint.version:type_name -> device_utils.Browser.TLSFingerprint.ProtocolVersion
	1,  // 17: device_utils.Browser.TLSFingerprint.cipherSuites:type_name -> device_utils.Browser.TLSFingerprint.CipherSuite
	2,  // 18: device_utils.Browser.TLSFingerprint.extensions:type_name -> device_utils.Browser.TLSFingerprint.Extensions
	3,  // 19: device_utils.Browser.TLSFingerprint.ellipticCurves:type_name -> device_utils.Browser.TLSFingerprint.EllipticCurve
	4,  // 20: device_utils.Browser.TLSFingerprint.ellipticCurvePointFormats:type_name -> device_utils.Browser.TLSFingerprint.EllipticCurvePointFormat
	23, // 21: device_utils.AndroidDevice.DeviceSoftware.softwareMetaData:type_name -> device_utils.AndroidDevice.DeviceSoftware.SoftwareMetaDataEntry
	24, // 22: device_utils.AndroidDevice.DeviceSoftware.appMetaData:type_name -> device_utils.AndroidDevice.DeviceSoftware.AppMetaDataEntry
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_device_utils_device_utils_proto_init() }
func file_proto_device_utils_device_utils_proto_init() {
	if File_proto_device_utils_device_utils_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_device_utils_device_utils_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPSLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SIMCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timezone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Browser_TLSFingerprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SIMCard_IMEI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SIMCard_MEID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDevice_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDevice_BuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_utils_device_utils_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidDevice_DeviceSoftware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_device_utils_device_utils_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_device_utils_device_utils_proto_goTypes,
		DependencyIndexes: file_proto_device_utils_device_utils_proto_depIdxs,
		EnumInfos:         file_proto_device_utils_device_utils_proto_enumTypes,
		MessageInfos:      file_proto_device_utils_device_utils_proto_msgTypes,
	}.Build()
	File_proto_device_utils_device_utils_proto = out.File
	file_proto_device_utils_device_utils_proto_rawDesc = nil
	file_proto_device_utils_device_utils_proto_goTypes = nil
	file_proto_device_utils_device_utils_proto_depIdxs = nil
}
